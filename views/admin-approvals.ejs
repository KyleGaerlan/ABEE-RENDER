<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Admin Account Approvals</title>
    <link rel="stylesheet" href="/css/useradmin.css">
    <style>
        .approvals-container {
            padding: 20px;
            background: white;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }

        .pending-account {
            background: #f8f9fa;
            border: 1px solid #dee2e6;
            border-radius: 6px;
            padding: 15px;
            margin-bottom: 15px;
            transition: all 0.3s ease;
        }

        .pending-account:hover {
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        }

        .account-details {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 15px;
            margin-bottom: 15px;
        }

        .detail-item {
            display: flex;
            flex-direction: column;
        }

        .detail-label {
            font-size: 0.9em;
            color: #666;
            margin-bottom: 4px;
        }

        .detail-value {
            font-weight: 500;
            color: #333;
        }

        .action-buttons {
            display: flex;
            gap: 10px;
        }

        .approve-btn, .decline-btn {
            padding: 8px 16px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-weight: 500;
            transition: all 0.3s ease;
        }

        .approve-btn {
            background-color: #28a745;
            color: white;
        }

        .approve-btn:hover {
            background-color: #218838;
        }

        .decline-btn {
            background-color: #dc3545;
            color: white;
        }

        .decline-btn:hover {
            background-color: #c82333;
        }

        .no-pending {
            text-align: center;
            padding: 40px;
            color: #666;
            font-style: italic;
        }

        .status-badge {
            display: inline-block;
            padding: 4px 8px;
            border-radius: 12px;
            font-size: 0.85em;
            font-weight: 500;
        }

        .status-pending {
            background-color: #ffd700;
            color: #856404;
        }

        .status-approved {
            background-color: #28a745;
            color: white;
        }

        .status-declined {
            background-color: #dc3545;
            color: white;
        }

        .notification {
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 15px 25px;
            border-radius: 4px;
            color: white;
            z-index: 1000;
            animation: slideIn 0.3s ease-out;
        }

        .notification.success {
            background-color: #28a745;
        }

        .notification.error {
            background-color: #dc3545;
        }

        /* Updated refresh button style */
        #refreshApprovals {
            background-color: #f26523;
            color: white;
            border: none;
            border-radius: 4px;
            padding: 8px 16px;
            font-weight: 500;
            cursor: pointer;
            display: flex;
            align-items: center;
            transition: background-color 0.3s;
        }

        #refreshApprovals:hover {
            background-color: #d9531e;
        }

        #refreshApprovals::before {
            content: "â†»";
            margin-right: 8px;
            font-size: 16px;
        }

        .dashboard-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
        }

        .dashboard-header h1 {
            color: #333;
            margin: 0;
        }

        .header-actions {
            display: flex;
            gap: 10px;
        }

        .loading {
            text-align: center;
            padding: 20px;
            color: #666;
        }

        .error-message {
            background-color: #f8d7da;
            color: #721c24;
            padding: 15px;
            border-radius: 4px;
            margin-bottom: 20px;
            text-align: center;
        }

        .error-message button {
            background-color: #dc3545;
            color: white;
            border: none;
            border-radius: 4px;
            padding: 5px 10px;
            margin-top: 10px;
            cursor: pointer;
        }

        .error-message button:hover {
            background-color: #c82333;
        }

        /* Improved menu toggle button */
        .menu-toggle {
            display: none;
            position: fixed;
            top: 15px;
            left: 15px;
            z-index: 1000;
            background-color: #f26523;
            color: white;
            border: none;
            border-radius: 4px;
            width: 40px;
            height: 40px;
            cursor: pointer;
            padding: 0;
        }

        .menu-toggle-inner {
            position: relative;
            width: 100%;
            height: 100%;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .menu-toggle span {
            display: block;
            position: absolute;
            width: 22px;
            height: 2px;
            background-color: white;
            transition: all 0.3s ease;
            left: 9px; /* Centered within the 40px button */
        }

        .menu-toggle span:nth-child(1) {
            top: 14px;
        }

        .menu-toggle span:nth-child(2) {
            top: 19px;
        }

        .menu-toggle span:nth-child(3) {
            top: 24px;
        }

        .menu-toggle.active span:nth-child(1) {
            transform: rotate(45deg);
            top: 19px;
        }

        .menu-toggle.active span:nth-child(2) {
            opacity: 0;
        }

        .menu-toggle.active span:nth-child(3) {
            transform: rotate(-45deg);
            top: 19px;
        }

        .sidebar-overlay {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            z-index: 998;
        }

        @media (max-width: 768px) {
            .menu-toggle {
                display: block;
            }

            .sidebar {
                position: fixed;
                left: -250px;
                top: 0;
                height: 100%;
                width: 250px;
                z-index: 999;
                transition: left 0.3s ease;
                overflow-y: auto;
            }

            .sidebar.active {
                left: 0;
            }

            .main-content {
                margin-left: 0;
                width: 100%;
                padding: 20px;
                padding-top: 60px;
            }

            .sidebar-overlay.active {
                display: block;
            }
        }

        @keyframes slideIn {
            from {
                transform: translateX(100%);
                opacity: 0;
            }
            to {
                transform: translateX(0);
                opacity: 1;
            }
        }
    </style>
</head>
<body>
    <button class="menu-toggle" id="menuToggle">
        <div class="menu-toggle-inner">
            <span></span>
            <span></span>
            <span></span>
        </div>
    </button>
    
    <div class="sidebar-overlay" id="sidebarOverlay"></div>
    
    <div class="sidebar" id="sidebar">
        <div class="logo">
            <img src="/images/Image-logo.png" alt="Company Logo">
        </div>
        <div class="admin-info" style="display: none;">
            <p>Welcome, <span id="adminName">Admin</span></p>
            <p class="admin-role" id="adminRole">Role: Admin</p>
        </div>
        <nav class="sidebar-nav">
            <a href="/admin-dashboard">Dashboard</a>
            
            <% if (admin.role !== 'employee') { %>
                <a href="/admin-users">Users</a>
                <a href="/admin-approvals">Account Approvals</a>
            <% } %>
            
            <a href="/admin-bookings">Bookings</a>
            <a href="/admin-tours">Tours</a>
            <a href="/admin-messages">Messages</a>
            <a href="#" onclick="handleAdminLogout()">Logout</a>
        </nav>
             
    </div>

    <div class="main-content">
        <header class="dashboard-header">
            <h1>Account Approvals</h1>
            <div class="header-actions">
                <button id="refreshApprovals" onclick="fetchPendingAccounts()">
                    Refresh List
                </button>
            </div>
        </header>

        <div class="approvals-container">
            <div id="pendingAccountsList">
                <p class="loading">Loading pending accounts...</p>
            </div>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            fetchPendingAccounts();
            
            // Mobile menu toggle functionality
            const menuToggle = document.getElementById('menuToggle');
            const sidebar = document.getElementById('sidebar');
            const sidebarOverlay = document.getElementById('sidebarOverlay');
            
            menuToggle.addEventListener('click', function() {
                this.classList.toggle('active');
                sidebar.classList.toggle('active');
                sidebarOverlay.classList.toggle('active');
                
                // Prevent scrolling when sidebar is open
                document.body.style.overflow = sidebar.classList.contains('active') ? 'hidden' : '';
            });
            
            sidebarOverlay.addEventListener('click', function() {
                menuToggle.classList.remove('active');
                sidebar.classList.remove('active');
                this.classList.remove('active');
                document.body.style.overflow = '';
            });
            
            // Close sidebar when clicking on a link (for mobile)
            const sidebarLinks = document.querySelectorAll('.sidebar-nav a');
            sidebarLinks.forEach(link => {
                link.addEventListener('click', function() {
                    if (window.innerWidth <= 768) {
                        menuToggle.classList.remove('active');
                        sidebar.classList.remove('active');
                        sidebarOverlay.classList.remove('active');
                        document.body.style.overflow = '';
                    }
                });
            });
        });
        
        async function fetchPendingAccounts() {
            try {
                document.getElementById('pendingAccountsList').innerHTML = '<p class="loading">Loading pending accounts...</p>';
                
                const response = await fetch('/api/admin/pending-accounts', {
                    credentials: 'include'
                });

                if (!response.ok) {
                    const errorData = await response.json().catch(() => ({}));
                    throw new Error(errorData.message || 'Failed to fetch pending accounts');
                }

                const data = await response.json();
                displayPendingAccounts(data.pendingAccounts);
            } catch (error) {
                console.error('Error:', error);
                document.getElementById('pendingAccountsList').innerHTML = `
                    <div class="error-message">
                        <p>Failed to load pending accounts: ${error.message}</p>
                        <button onclick="fetchPendingAccounts()">Try Again</button>
                    </div>
                `;
                showNotification('Failed to load pending accounts', 'error');
            }
        }
        function hasApprovalPermission() {
        // Check if the admin role is stored in localStorage
        const adminRole = localStorage.getItem('adminRole');
        console.log('Admin role from localStorage:', adminRole);
        return adminRole && adminRole.toLowerCase() === 'admin';
    }

        
        
        function displayPendingAccounts(accounts) {
            const container = document.getElementById('pendingAccountsList');
            const canApprove = hasApprovalPermission();
            
            if (!accounts || accounts.length === 0) {
                container.innerHTML = `
                    <div class="no-pending">
                        <p>No pending accounts to review</p>
                    </div>
                `;
                return;
            }
            container.innerHTML = accounts.map(account => `
                <div class="pending-account" id="account-${account._id}">
                    <div class="account-details">
                        <div class="detail-item">
                            <span class="detail-label">Name</span>
                            <span class="detail-value">${account.firstName || ''} ${account.lastName || ''}</span>
                        </div>
                        <div class="detail-item">
                            <span class="detail-label">Email</span>
                            <span class="detail-value">${account.email || 'N/A'}</span>
                        </div>
                        <div class="detail-item">
                            <span class="detail-label">Username</span>
                            <span class="detail-value">${account.username || 'N/A'}</span>
                        </div>
                        <div class="detail-item">
                            <span class="detail-label">Phone</span>
                            <span class="detail-value">${account.phoneNumber || 'N/A'}</span>
                        </div>
                        <div class="detail-item">
                            <span class="detail-label">Role</span>
                            <span class="detail-value">${account.role || 'N/A'}</span>
                        </div>
                        <div class="detail-item">
                            <span class="detail-label">Status</span>
                            <span class="status-badge status-pending">Pending</span>
                        </div>
                        <div class="detail-item">
                            <span class="detail-label">Verified</span>
                            <span class="detail-value">${account.isVerified ? 'Yes' : 'No'}</span>
                        </div>
                    </div>
                    <div class="action-buttons">
                        <button class="approve-btn" onclick="handleAccountAction('${account._id}', 'approve')">
                            Approve
                        </button>
                        <button class="decline-btn" onclick="handleAccountAction('${account._id}', 'decline')">
                            Decline
                        </button>
                    </div>
                </div>
            `).join('');
        }
        async function handleAccountAction(accountId, action) {
    // Remove the permission check that's preventing the action
    try {
        const response = await fetch('/api/admin/account-action', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            credentials: 'include',
            body: JSON.stringify({ accountId, action })
        });

        if (!response.ok) {
            throw new Error('Failed to process account action');
        }

        const data = await response.json();
        showNotification(data.message, 'success');
        const accountElement = document.getElementById(`account-${accountId}`);
        if (accountElement) {
            accountElement.remove();
        }

        fetchPendingAccounts();
    } catch (error) {
        console.error('Error:', error);
        showNotification('Failed to process account action', 'error');
    }
}


        function showNotification(message, type) {
            const notification = document.createElement('div');
            notification.className = `notification ${type}`;
            notification.textContent = message;
            document.body.appendChild(notification);

            setTimeout(() => {
                notification.remove();
            }, 3000);
        }
        
        document.addEventListener('DOMContentLoaded', function() {
            const adminName = localStorage.getItem('adminName') || 'Admin';
            const adminRole = localStorage.getItem('adminRole') || 'Admin';
            
            document.getElementById('adminName').textContent = adminName;
            document.getElementById('adminRole').textContent = `Role: ${adminRole}`;
            
            fetchPendingAccounts();
        });
        
        function handleAdminLogout() {
            fetch('/api/admin/logout', {
                method: 'GET',
                credentials: 'include'
            })
            .then(() => {
                localStorage.removeItem('isAdminLoggedIn');
                localStorage.removeItem('adminToken');
                localStorage.removeItem('adminRole');
                localStorage.removeItem('adminName');
                window.location.href = '/';
            })
            .catch(error => {
                console.error('Logout error:', error);
                showNotification('Logout failed. Please try again.', 'error');
            });
        }document.addEventListener('DOMContentLoaded', function() {
        const adminRole = document.getElementById('adminRole').textContent.split(': ')[1].toLowerCase();

        if (adminRole === 'employee') {
            document.querySelector('.tour-form-container').style.display = 'none';
            document.querySelectorAll('.sidebar-nav a').forEach(link => {
                if (link.href.includes('admin-dashboard')) {
                    link.style.display = 'none';
                }
            });
        }

        // Mobile menu toggle functionality
        const menuToggle = document.getElementById('menuToggle');
        const sidebar = document.getElementById('sidebar');
        const sidebarOverlay = document.getElementById('sidebarOverlay');
        
        if (menuToggle && sidebar && sidebarOverlay) {
            menuToggle.addEventListener('click', function() {
                this.classList.toggle('active');
                sidebar.classList.toggle('active');
                sidebarOverlay.classList.toggle('active');
                
                // Prevent scrolling when sidebar is open
                document.body.style.overflow = sidebar.classList.contains('active') ? 'hidden' : '';
            });
            
            sidebarOverlay.addEventListener('click', function() {
                menuToggle.classList.remove('active');
                sidebar.classList.remove('active');
                this.classList.remove('active');
                document.body.style.overflow = '';
            });
            
            // Close sidebar when clicking on a link (for mobile)
            const sidebarLinks = document.querySelectorAll('.sidebar-nav a');
            sidebarLinks.forEach(link => {
                link.addEventListener('click', function() {
                    if (window.innerWidth <= 768) {
                        menuToggle.classList.remove('active');
                        sidebar.classList.remove('active');
                        sidebarOverlay.classList.remove('active');
                        document.body.style.overflow = '';
                    }
                });
            });
        }
    });
    </script>
</body>
</html>
