<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Contact Messages - Admin Dashboard</title>
    <link rel="stylesheet" href="/css/useradmin.css">
    <style>
        .messages-container {
            padding: 20px;
            background: white;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            margin-bottom: 20px;
        }

        .messages-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
        }

        .filter-controls {
            display: flex;
            gap: 15px;
            align-items: center;
        }

        .filter-group {
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .filter-group select {
            padding: 8px;
            border: 1px solid #ddd;
            border-radius: 4px;
            min-width: 120px;
        }

        .search-group {
            display: flex;
            gap: 10px;
        }

        .search-group input {
            padding: 8px;
            border: 1px solid #ddd;
            border-radius: 4px;
            min-width: 200px;
        }

        .search-group button {
            padding: 8px 15px;
            background-color: #f26523;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
        }

        .messages-table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 20px;
        }

        .messages-table th,
        .messages-table td {
            padding: 12px;
            text-align: left;
            border-bottom: 1px solid #eee;
            color: black;
        }

        .messages-table th {
            background-color: #f8f9fa;
            font-weight: 600;
        }

        .message-status {
            padding: 4px 8px;
            border-radius: 12px;
            font-size: 0.85em;
            font-weight: 500;
        }

        .status-unread {
            background-color: #fef3c7;
            color: #92400e;
        }

        .status-read {
            background-color: #e0e7ff;
            color: #3730a3;
        }

        .status-responded {
            background-color: #d1fae5;
            color: #065f46;
        }

        .action-buttons {
            display: flex;
            gap: 8px;
        }

        .action-btn {
            padding: 6px 12px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 0.9em;
        }

        .view-btn {
            background-color: #3b82f6;
            color: white;
        }

        .reply-btn {
            background-color: #10b981;
            color: white;
        }

        .delete-btn {
            background-color: #ef4444;
            color: white;
        }

        .message-modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            z-index: 1000;
        }

        .message-modal-content {
            position: relative;
            background-color: white;
            margin: 50px auto;
            padding: 20px;
            width: 90%;
            max-width: 600px;
            border-radius: 8px;
            max-height: 80vh;
            overflow-y: auto;
        }

        .message-details {
            margin-bottom: 20px;
        }

        .message-details h3 {
            margin: 0 0 15px 0;
            color: #333;
        }

        .message-info {
            display: grid;
            grid-template-columns: auto 1fr;
            gap: 10px;
            margin-bottom: 20px;
        }

        .message-info dt {
            font-weight: 600;
            color: #666;
        }

        .message-content {
            background-color: #f8f9fa;
            padding: 15px;
            border-radius: 4px;
            margin-bottom: 20px;
        }

        .reply-form {
            margin-top: 20px;
        }

        .reply-form textarea {
            width: 100%;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 4px;
            margin-bottom: 10px;
            min-height: 100px;
        }

        .pagination {
            display: flex;
            justify-content: center;
            gap: 10px;
            margin-top: 20px;
        }

        .pagination button {
            padding: 8px 12px;
            border: 1px solid #ddd;
            background-color: white;
            border-radius: 4px;
            cursor: pointer;
        }

        .pagination button.active {
            background-color: #f26523;
            color: white;
            border-color: #f26523;
        }
        .message-status-controls {
            display: flex;
            align-items: center;
            gap: 10px;
            margin-bottom: 20px;
        }

        .message-status-controls select {
            padding: 8px 12px;
            border: 1px solid #ddd;
            border-radius: 4px;
            flex-grow: 1;
        }

        .status-update-btn {
            padding: 8px 15px;
            background-color: #3b82f6;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-weight: 500;
            transition: background-color 0.2s;
        }

        .status-update-btn:hover {
            background-color: #2563eb;
        }

        .reply-btn-send {
            padding: 10px 20px;
            background-color: #10b981;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-weight: 500;
            transition: background-color 0.2s;
            width: 100%;
            margin-top: 10px;
        }

        .reply-btn-send:hover {
            background-color: #059669;
        }

        .notification {
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 15px 25px;
            border-radius: 4px;
            color: white;
            font-weight: 500;
            z-index: 2000;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            animation: slideIn 0.3s ease-out, fadeOut 0.5s ease-in 2.5s forwards;
            max-width: 300px;
        }

        .notification.success {
            background-color: #10b981;
        }

        .notification.error {
            background-color: #ef4444;
        }

        .notification.info {
            background-color: #3b82f6;
        }

        @keyframes slideIn {
            from {
                transform: translateX(100%);
                opacity: 0;
            }
            to {
                transform: translateX(0);
                opacity: 1;
            }
        }

        @keyframes fadeOut {
            from {
                opacity: 1;
            }
            to {
                opacity: 0;
            }
        }

        .no-messages {
            text-align: center;
            padding: 30px;
            color: #666;
            font-style: italic;
        }

        .loading-spinner {
            display: inline-block;
            width: 20px;
            height: 20px;
            border: 3px solid rgba(0, 0, 0, 0.1);
            border-radius: 50%;
            border-top-color: #f26523;
            animation: spin 1s ease-in-out infinite;
            margin-right: 10px;
        }

        @keyframes spin {
            to {
                transform: rotate(360deg);
            }
        }

        /* Mobile menu toggle button */
        .menu-toggle {
            display: none;
            position: fixed;
            top: 15px;
            left: 15px;
            z-index: 1000;
            background-color: #f26523;
            color: white;
            border: none;
            border-radius: 4px;
            width: 40px;
            height: 40px;
            cursor: pointer;
            padding: 0;
        }

        .menu-toggle-inner {
            position: relative;
            width: 100%;
            height: 100%;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .menu-toggle span {
            display: block;
            position: absolute;
            width: 22px;
            height: 2px;
            background-color: white;
            transition: all 0.3s ease;
            left: 9px; /* Centered within the 40px button */
        }

        .menu-toggle span:nth-child(1) {
            top: 14px;
        }

        .menu-toggle span:nth-child(2) {
            top: 19px;
        }

        .menu-toggle span:nth-child(3) {
            top: 24px;
        }

        .menu-toggle.active span:nth-child(1) {
            transform: rotate(45deg);
            top: 19px;
        }

        .menu-toggle.active span:nth-child(2) {
            opacity: 0;
        }

        .menu-toggle.active span:nth-child(3) {
            transform: rotate(-45deg);
            top: 19px;
        }

        .sidebar-overlay {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            z-index: 998;
        }

        /* Responsive styles with !important to override external CSS */
        @media (max-width: 768px) {
            .menu-toggle {
                display: block !important;
            }

            .sidebar {
                position: fixed !important;
                left: -250px !important;
                top: 0 !important;
                height: 100% !important;
                width: 250px !important;
                z-index: 999 !important;
                transition: left 0.3s ease !important;
                overflow-y: auto !important;
                margin-left: 0 !important; /* Override any margin */
            }

            .sidebar.active {
                left: 0 !important;
            }

            .main-content {
                margin-left: 0 !important;
                width: 100% !important;
                padding: 20px !important;
                padding-top: 60px !important;
            }

            .sidebar-overlay.active {
                display: block !important;
            }

            .filter-controls {
                flex-direction: column;
                align-items: stretch;
            }

            .messages-table {
                display: block;
                overflow-x: auto;
            }

            .action-buttons {
                flex-direction: column;
            }
        }
        .done-btn {
    background-color: #6366f1;
    color: white;
}

.restore-btn {
    background-color: #8b5cf6;
    color: white;
}

.archived-row {
    opacity: 0.6;
    background-color: #f9fafb;
}

/* Add this to your filter group */
.archive-filter {
    display: flex;
    align-items: center;
    gap: 10px;
}
.confirm-modal-header {
        margin-bottom: 15px;
        padding-bottom: 10px;
        border-bottom: 1px solid #eee;
    }
    
    .confirm-modal-body {
        margin-bottom: 20px;
    }
    
    .confirm-modal-footer {
        display: flex;
        justify-content: flex-end;
        padding-top: 15px;
        border-top: 1px solid #eee;
    }
    .add-feedback-btn {
    background-color: #8b5cf6;
    color: white;
}

.remove-feedback-btn {
    background-color: #ef4444;
    color: white;
}

.action-buttons {
    display: flex;
    gap: 8px;
    flex-wrap: wrap;
}

.action-buttons button {
    flex: 1;
    min-width: 100px;
    white-space: nowrap;
}

    </style>
</head>
<body>
    <button class="menu-toggle" id="menuToggle">
        <div class="menu-toggle-inner">
            <span></span>
            <span></span>
            <span></span>
        </div>
    </button>
    
    <div class="sidebar-overlay" id="sidebarOverlay"></div>
    
    <div class="sidebar" id="sidebar">
        <div class="logo">
            <img src="/images/Image-logo.png" alt="Company Logo">
        </div>
        <div class="admin-info" style="display: none;">
            <p>Welcome, <span id="adminName"><%= admin.firstName %> <%= admin.lastName %></span></p>
            <p class="admin-role" id="adminRole">Role: <%= admin.role %></p>
        </div>
        <nav class="sidebar-nav">
            <a href="/admin-dashboard">Dashboard</a>
            
            <% if (admin.role !== 'employee') { %>
                <a href="/admin-users">Users</a>
                <a href="/admin-approvals">Account Approvals</a>
            <% } %>
            
            <a href="/admin-bookings">Bookings</a>
            <a href="/admin-tours">Tours</a>
            <a href="/admin-messages">Messages</a>
            <a href="#" onclick="handleAdminLogout()">Logout</a>
        </nav>
    </div>

    <div class="main-content">
        <div class="messages-container">
            <div class="messages-header">
                <h1>Contact Messages</h1>
                <div class="filter-controls">
                    <div class="filter-group">
                        <label for="statusFilter">Status:</label>
                        <select id="statusFilter">
                            <option value="">All</option>
                            <option value="unread">Unread</option>
                            <option value="read">Read</option>
                            <option value="responded">Responded</option>
                        </select>
                    </div>
                    <div class="filter-group archive-filter">
                        <label for="archiveFilter">Show:</label>
                        <select id="archiveFilter">
                            <option value="active">Active</option>
                            <option value="archived">Archived</option>
                            <option value="all">All</option>
                        </select>
                    </div>
                    <div class="search-group">
                        <input type="text" id="searchInput" placeholder="Search messages...">
                        <button id="searchBtn">Search</button>
                    </div>
                </div>
                
            </div>

            <table class="messages-table">
                <thead>
                    <tr>
                        <th>Date</th>
                        <th>Name</th>
                        <th>Subject</th>
                        <th>Status</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody id="messagesTableBody">
                    <!-- Messages will be loaded here -->
                </tbody>
            </table>

            <div class="pagination" id="pagination">
                <!-- Pagination will be added here -->
            </div>
        </div>
    </div>

    <!-- Message View Modal -->
    <div id="messageModal" class="message-modal">
        <div class="message-modal-content">
            <span class="close">&times;</span>
            <div class="message-details">
                <h3>Message Details</h3>
                <dl class="message-info">
                    <dt>From:</dt>
                    <dd id="messageFrom"></dd>
                    <dt>Email:</dt>
                    <dd id="messageEmail"></dd>
                    <dt>Phone:</dt>
                    <dd id="messagePhone"></dd>
                    <dt>Country:</dt>
                    <dd id="messageCountry"></dd>
                    <dt>Subject</dt>
                    <dd id="messageSubject"></dd>
                    <dt>Date:</dt>
                    <dd id="messageDate"></dd>
                </dl>
                
                <div class="message-content" id="messageContent"></div>
                <div class="message-status-controls">
                    <select id="messageStatus">
                        <option value="unread">Unread</option>
                        <option value="read">Read</option>
                        <option value="responded">Responded</option>
                    </select>
                    <button class="status-update-btn" onclick="updateMessageStatus()">Update Status</button>
                </div>
                <div class="reply-form">
                    <h4>Reply</h4>
                    <textarea id="replyContent" placeholder="Type your reply..."></textarea>
                    <button class="reply-btn-send" onclick="sendReply()">Send Reply</button>
                </div>
            </div>
        </div>
    </div>
<!-- Add this to your HTML, just before the closing </body> tag -->
<!-- Confirmation Modal -->
<div id="confirmModal" class="message-modal">
    <div class="message-modal-content" style="max-width: 400px;">
        <div class="confirm-modal-header">
            <h3 id="confirmTitle">Confirm Action</h3>
        </div>
        <div class="confirm-modal-body">
            <p id="confirmMessage">Are you sure you want to proceed?</p>
        </div>
        <div class="confirm-modal-footer">
            <button id="confirmCancel" class="action-btn" style="background-color: #6b7280; margin-right: 10px;">Cancel</button>
            <button id="confirmOk" class="action-btn" style="background-color: #f26523;">Confirm</button>
        </div>
    </div>
</div>

    <!-- Notification container -->
    <div id="notificationContainer"></div>

    <script>
        // Add your JavaScript code here to handle the functionality
        document.addEventListener('DOMContentLoaded', function() {
            loadMessages();
            setupEventListeners();
            
            document.getElementById('archiveFilter').value = 'active';
            const menuToggle = document.getElementById('menuToggle');
            const sidebar = document.getElementById('sidebar');
            const sidebarOverlay = document.getElementById('sidebarOverlay');
            
            menuToggle.addEventListener('click', function() {
                this.classList.toggle('active');
                sidebar.classList.toggle('active');
                sidebarOverlay.classList.toggle('active');
                
                // Prevent scrolling when sidebar is open
                document.body.style.overflow = sidebar.classList.contains('active') ? 'hidden' : '';
            });
            
            sidebarOverlay.addEventListener('click', function() {
                menuToggle.classList.remove('active');
                sidebar.classList.remove('active');
                this.classList.remove('active');
                document.body.style.overflow = '';
            });
            
            // Close sidebar when clicking on a link (for mobile)
            const sidebarLinks = document.querySelectorAll('.sidebar-nav a');
            sidebarLinks.forEach(link => {
                link.addEventListener('click', function() {
                    if (window.innerWidth <= 768) {
                        menuToggle.classList.remove('active');
                        sidebar.classList.remove('active');
                        sidebarOverlay.classList.remove('active');
                        document.body.style.overflow = '';
                    }
                });
            });
        });

        // Global variables
        let currentPage = 1;
        let totalPages = 1;
        let currentStatus = '';
        let currentSearch = '';
        let currentMessageId = '';
        let currentArchive = 'active';

        function loadMessages() {
    const statusFilter = document.getElementById('statusFilter').value;
    const archiveFilter = document.getElementById('archiveFilter').value;
    const searchQuery = document.getElementById('searchInput').value;
    
    // Update global variables
    currentStatus = statusFilter;
    currentArchive = archiveFilter;
    currentSearch = searchQuery;
    
    // Show loading state
    document.getElementById('messagesTableBody').innerHTML = `
        <tr>
            <td colspan="5" style="text-align: center; padding: 20px;">
                <div class="loading-spinner"></div> Loading messages...
            </td>
        </tr>
    `;
    
    // Determine archived parameter
    let archivedParam = '';
    if (archiveFilter === 'archived') {
        archivedParam = 'true';
    } else if (archiveFilter === 'active') {
        archivedParam = 'false';
    }
    
    // Fetch messages from the server
    fetch(`/api/admin/contacts?page=${currentPage}&status=${statusFilter}&archived=${archivedParam}&search=${encodeURIComponent(searchQuery)}`)
        .then(response => {
            if (!response.ok) {
                throw new Error('Failed to load messages');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                displayMessages(data.contacts);
                updatePagination(data.currentPage, data.totalPages);
                totalPages = data.totalPages;
            } else {
                showError('Failed to load messages');
            }
        })
        .catch(error => {
            console.error('Error loading messages:', error);
            showError('Error loading messages. Please try again.');
        });
}
function displayMessages(messages) {
    const tableBody = document.getElementById('messagesTableBody');
    
    if (!messages || messages.length === 0) {
        tableBody.innerHTML = `
            <tr>
                <td colspan="5" class="no-messages">
                    <p>No messages found</p>
                    <p>Try changing your filters or search criteria</p>
                </td>
            </tr>
        `;
        return;
    }
    
    let html = '';
    
    messages.forEach(message => {
        const date = new Date(message.date).toLocaleDateString();
        const statusClass = `status-${message.status}`;
        
        html += `
            <tr class="${message.archived ? 'archived-row' : ''}">
                <td>${date}</td>
                <td>${message.name}</td>
                <td>${message.subject}</td>
                <td><span class="message-status ${statusClass}">${capitalizeFirstLetter(message.status)}</span></td>
                <td>
                    <div class="action-buttons">
                        <button class="action-btn reply-btn" onclick="prepareReply('${message._id}')">Reply</button>
                        <button class="action-btn ${message.displayOnHome ? 'remove-feedback-btn' : 'add-feedback-btn'}"
                                onclick="toggleFeedbackDisplay('${message._id}', ${!message.displayOnHome})">
                            ${message.displayOnHome ? 'Remove from Home' : 'Show on Home'}
                        </button>
                        <button class="action-btn ${message.archived ? 'restore-btn' : 'done-btn'}" 
                                onclick="${message.archived ? 'restoreMessage' : 'archiveMessage'}('${message._id}')">
                            ${message.archived ? 'Restore' : 'Done'}
                        </button>
                    </div>
                </td>
            </tr>
        `;
    });
    
    tableBody.innerHTML = html;
}


        // Update pagination controls
        function updatePagination(currentPage, totalPages) {
            const paginationContainer = document.getElementById('pagination');
            
            if (totalPages <= 1) {
                paginationContainer.innerHTML = '';
                return;
            }
            
            let html = '';
            
            // Previous button
            html += `<button ${currentPage === 1 ? 'disabled' : ''} onclick="goToPage(${currentPage - 1})">Previous</button>`;
            
            // Page numbers
            const maxPages = 5;
            let startPage = Math.max(1, currentPage - Math.floor(maxPages / 2));
            let endPage = Math.min(totalPages, startPage + maxPages - 1);
            
            if (endPage - startPage + 1 < maxPages) {
                startPage = Math.max(1, endPage - maxPages + 1);
            }
            
            for (let i = startPage; i <= endPage; i++) {
                html += `<button class="${i === currentPage ? 'active' : ''}" onclick="goToPage(${i})">${i}</button>`;
            }
            
            // Next button
            html += `<button ${currentPage === totalPages ? 'disabled' : ''} onclick="goToPage(${currentPage + 1})">Next</button>`;
            
            paginationContainer.innerHTML = html;
        }

        // Go to a specific page
        function goToPage(page) {
            if (page < 1 || page > totalPages) {
                return;
            }
            
            currentPage = page;
            loadMessages();
        }

        // View message details
        function viewMessage(messageId) {
            currentMessageId = messageId;
            
            fetch(`/api/admin/contacts/${messageId}`)
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Failed to load message details');
                    }
                    return response.json();
                })
                .then(data => {
                    if (data.success) {
                        displayMessageDetails(data.contact);
                        
                        // If message was unread, automatically mark it as read
                        if (data.contact.status === 'unread') {
                            updateMessageStatus('read', false);
                        }
                    } else {
                        showError('Failed to load message details');
                    }
                })
                .catch(error => {
                    console.error('Error loading message details:', error);
                    showError('Error loading message details. Please try again.');
                });
        }

        // Display message details in the modal
function displayMessageDetails(message) {
    document.getElementById('messageFrom').textContent = message.name;
    document.getElementById('messageEmail').textContent = message.email;
    document.getElementById('messagePhone').textContent = message.phone || 'Not provided';
    document.getElementById('messageCountry').textContent = message.country;
    document.getElementById('messageSubject').textContent = message.subject;
    document.getElementById('messageDate').textContent = new Date(message.date).toLocaleString();
    document.getElementById('messageContent').textContent = message.message;
    document.getElementById('messageStatus').value = message.status;
    
    // Show the modal
    document.getElementById('messageModal').style.display = 'block';
}


        // Prepare to reply to a message
        function prepareReply(messageId) {
            viewMessage(messageId);
            
            // Focus on the reply textarea after the modal is shown
            setTimeout(() => {
                document.getElementById('replyContent').focus();
            }, 500);
        }


// Add this function to your JavaScript
function toggleFeedbackDisplay(messageId, display) {
    fetch(`/api/admin/contacts/${messageId}/display`, {
        method: 'PATCH',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({ displayOnHome: display })
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            loadMessages();
            showSuccess(`Message ${display ? 'will now be' : 'will no longer be'} displayed on homepage`);
        } else {
            showError(data.message || 'Failed to update display status');
        }
    })
    .catch(error => {
        console.error('Error updating display status:', error);
        showError('Error updating display status');
    });
}

function sendReply() {
    const replyContent = document.getElementById('replyContent').value.trim();
    
    if (!replyContent) {
        showError('Please enter a reply message');
        return;
    }
    
    const email = document.getElementById('messageEmail').textContent;
    const subject = 'Re: ' + document.getElementById('messageSubject').textContent;
    
    // Show loading state
    const sendButton = document.querySelector('.reply-btn-send');
    const originalText = sendButton.textContent;
    sendButton.innerHTML = '<div class="loading-spinner"></div> Sending...';
    sendButton.disabled = true;
    
    // Send the reply
    fetch('/api/admin/send-reply', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({
            messageId: currentMessageId,
            email,
            subject,
            content: replyContent
        })
    })
    .then(response => {
        if (!response.ok) {
            throw new Error('Failed to send reply');
        }
        return response.json();
    })
    .then(data => {
        if (data.success) {
            // Update message status to responded
            updateMessageStatus('responded', true);
            
            // Clear the reply textarea
            document.getElementById('replyContent').value = '';
            
            showSuccess('Reply sent successfully');
            
            // Close the modal after a short delay
            setTimeout(() => {
                document.getElementById('messageModal').style.display = 'none';
            }, 1500);
        } else {
            showError(data.message || 'Failed to send reply');
        }
    })
    .catch(error => {
        console.error('Error sending reply:', error);
        showError('Error sending reply. Please try again.');
    })
    .finally(() => {
        // Restore button state
        sendButton.innerHTML = originalText;
        sendButton.disabled = false;
    });
}

        // Update the status of a message
        function updateMessageStatus(newStatus = null, reload = true) {
            // If no status is provided, get it from the select element
            const status = newStatus || document.getElementById('messageStatus').value;
            
            fetch(`/api/admin/contacts/${currentMessageId}/status`, {
                method: 'PATCH',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ status })
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Failed to update message status');
                }
                return response.json();
            })
            .then(data => {
                if (data.success) {
                    if (reload) {
                        // Close the modal
                        document.getElementById('messageModal').style.display = 'none';
                        
                        // Reload messages
                        loadMessages();
                        
                        showSuccess('Message status updated successfully');
                    }
                } else {
                    showError(data.message || 'Failed to update message status');
                }
            })
            .catch(error => {
                console.error('Error updating message status:', error);
                showError('Error updating message status. Please try again.');
            });
        }

        // Delete a message
        function deleteMessage(messageId) {
            if (!confirm('Are you sure you want to delete this message?')) {
                return;
            }
            
            fetch(`/api/admin/contacts/${messageId}`, {
                method: 'DELETE'
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Failed to delete message');
                }
                return response.json();
            })
            .then(data => {
                if (data.success) {
                    loadMessages();
                    showSuccess('Message deleted successfully');
                } else {
                    showError(data.message || 'Failed to delete message');
                }
            })
            .catch(error => {
                console.error('Error deleting message:', error);
                showError('Error deleting message. Please try again.');
            });
        }

        // Set up event listeners
        function setupEventListeners() {
            // Status filter change
            document.getElementById('statusFilter').addEventListener('change', function() {
                currentPage = 1;
                loadMessages();
            });
            
            // Search button click
            document.getElementById('searchBtn').addEventListener('click', function() {
                currentPage = 1;
                loadMessages();
            });
            
            // Search input enter key
            document.getElementById('searchInput').addEventListener('keypress', function(e) {
                if (e.key === 'Enter') {
                    currentPage = 1;
                    loadMessages();
                }
            });
            document.getElementById('archiveFilter').addEventListener('change', function() {
                currentPage = 1;
                loadMessages();
            });

            const closeBtn = document.querySelector('.message-modal .close');
            closeBtn.addEventListener('click', function() {
                document.getElementById('messageModal').style.display = 'none';
            });
            
            // Close modal when clicking outside
            window.addEventListener('click', function(event) {
                const modal = document.getElementById('messageModal');
                if (event.target === modal) {
                    modal.style.display = 'none';
                }
            });
        }

        // Show notification
        function showNotification(message, type = 'info') {
            // Remove any existing notifications
            const existingNotifications = document.querySelectorAll('.notification');
            existingNotifications.forEach(notification => {
                notification.remove();
            });
            
            // Create notification element
            const notification = document.createElement('div');
            notification.className = `notification ${type}`;
            notification.textContent = message;
            
            // Add to document
            document.body.appendChild(notification);
            
            // Remove after animation completes (3 seconds)
            setTimeout(() => {
                notification.remove();
            }, 3000);
        }

        // Show error notification
        function showError(message) {
            showNotification(message, 'error');
        }

        // Show success notification
        function showSuccess(message) {
            showNotification(message, 'success');
        }

        // Helper function to capitalize the first letter of a string
        function capitalizeFirstLetter(string) {
            return string.charAt(0).toUpperCase() + string.slice(1);
        }

        // Handle admin logout
        function handleAdminLogout() {
            fetch('/api/admin/logout', {
                method: 'GET',
                credentials: 'include'
            })
            .then(() => {
                localStorage.removeItem('isAdminLoggedIn');
                localStorage.removeItem('adminToken');
                localStorage.removeItem('adminRole');
                localStorage.removeItem('adminName');
                window.location.href = '/';
            })
            .catch(error => {
                console.error('Logout error:', error);
                showError('Logout failed. Please try again.');
            });
        }
        // Archive a message (mark as done)
function archiveMessage(messageId) {
    if (!confirm('Mark this message as done? It will be archived.')) {
        return;
    }
    
    fetch(`/api/admin/contacts/${messageId}/archive`, {
        method: 'PATCH',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({ archived: true })
    })
    .then(response => {
        if (!response.ok) {
            throw new Error('Failed to archive message');
        }
        return response.json();
    })
    .then(data => {
        if (data.success) {
            loadMessages();
            showSuccess('Message archived successfully');
        } else {
            showError(data.message || 'Failed to archive message');
        }
    })
    .catch(error => {
        console.error('Error archiving message:', error);
        showError('Error archiving message. Please try again.');
    });
}

// Restore an archived message
function restoreMessage(messageId) {
    if (!confirm('Restore this message to active status?')) {
        return;
    }
    
    fetch(`/api/admin/contacts/${messageId}/archive`, {
        method: 'PATCH',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({ archived: false })
    })
    .then(response => {
        if (!response.ok) {
            throw new Error('Failed to restore message');
        }
        return response.json();
    })
    .then(data => {
        if (data.success) {
            loadMessages();
            showSuccess('Message restored successfully');
        } else {
            showError(data.message || 'Failed to restore message');
        }
    })
    .catch(error => {
        console.error('Error restoring message:', error);
        showError('Error restoring message. Please try again.');
    });
}
// Add this function to your JavaScript
function showConfirmModal(title, message, onConfirm) {
    // Set modal content
    document.getElementById('confirmTitle').textContent = title;
    document.getElementById('confirmMessage').textContent = message;
    
    // Show modal
    const modal = document.getElementById('confirmModal');
    modal.style.display = 'block';
    
    // Set up event handlers
    const confirmBtn = document.getElementById('confirmOk');
    const cancelBtn = document.getElementById('confirmCancel');
    
    // Remove any existing event listeners
    const newConfirmBtn = confirmBtn.cloneNode(true);
    const newCancelBtn = cancelBtn.cloneNode(true);
    confirmBtn.parentNode.replaceChild(newConfirmBtn, confirmBtn);
    cancelBtn.parentNode.replaceChild(newCancelBtn, cancelBtn);
    
    // Add new event listeners
    newConfirmBtn.addEventListener('click', function() {
        modal.style.display = 'none';
        onConfirm();
    });
    
    newCancelBtn.addEventListener('click', function() {
        modal.style.display = 'none';
    });
    
    // Close when clicking outside
    window.addEventListener('click', function(event) {
        if (event.target === modal) {
            modal.style.display = 'none';
        }
    });
}

// Replace the archiveMessage function
function archiveMessage(messageId) {
    showConfirmModal(
        "Archive Message", 
        "Mark this message as done? It will be archived.",
        function() {
            fetch(`/api/admin/contacts/${messageId}/archive`, {
                method: 'PATCH',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ archived: true })
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Failed to archive message');
                }
                return response.json();
            })
            .then(data => {
                if (data.success) {
                    loadMessages();
                    showSuccess('Message archived successfully');
                } else {
                    showError(data.message || 'Failed to archive message');
                }
            })
            .catch(error => {
                console.error('Error archiving message:', error);
                showError('Error archiving message. Please try again.');
            });
        }
    );
}

// Replace the restoreMessage function
function restoreMessage(messageId) {
    showConfirmModal(
        "Restore Message", 
        "Restore this message to active status?",
        function() {
            fetch(`/api/admin/contacts/${messageId}/archive`, {
                method: 'PATCH',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ archived: false })
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Failed to restore message');
                }
                return response.json();
            })
            .then(data => {
                if (data.success) {
                    loadMessages();
                    showSuccess('Message restored successfully');
                } else {
                    showError(data.message || 'Failed to restore message');
                }
            })
            .catch(error => {
                console.error('Error restoring message:', error);
                showError('Error restoring message. Please try again.');
            });
        }
    );
}

    </script>
</body>
</html>
