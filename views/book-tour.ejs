<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Book Tour - A.BEE Travel and Tours</title>
    <link rel="stylesheet" href="/css/styles.css">
    <link rel="stylesheet" href="/css/fontstyle.css">
    <style>
        .booking-container {
            max-width: 1000px;
            margin: 120px auto 50px;
            padding: 30px;
            background-color: white;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        }

        .booking-header {
            text-align: center;
            margin-bottom: 30px;
        }

        .booking-header h1 {
            color: #333;
            margin-bottom: 10px;
        }

        .booking-header p {
            color: #666;
        }

        .booking-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 30px;
        }

        @media (max-width: 768px) {
            .booking-grid {
                grid-template-columns: 1fr;
            }
        }

        .tour-details {
            border-right: 1px solid #eee;
            padding-right: 30px;
        }

        @media (max-width: 768px) {
            .tour-details {
                border-right: none;
                padding-right: 0;
                border-bottom: 1px solid #eee;
                padding-bottom: 20px;
                margin-bottom: 20px;
            }
        }

        .tour-image {
            width: 100%;
            height: 200px;
            object-fit: cover;
            border-radius: 8px;
            margin-bottom: 20px;
        }

        .tour-info h2 {
            color: #333;
            margin-bottom: 15px;
        }

        .tour-info p {
            color: #666;
            margin-bottom: 10px;
        }

        .price-tag {
            font-size: 24px;
            font-weight: bold;
            color: #f26523;
            margin: 15px 0;
        }

        .booking-form h2 {
            color: #333;
            margin-bottom: 20px;
        }

        .form-group {
            margin-bottom: 20px;
        }

        .form-group label {
            display: block;
            margin-bottom: 5px;
            font-weight: 500;
            color: #333;
        }

        .form-group input,
        .form-group select,
        .form-group textarea {
            width: 100%;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-size: 16px;
        }

        .form-group input[type="date"] {
            font-family: inherit;
        }

        .payment-methods {
            margin-top: 30px;
        }

        .payment-methods h3 {
            margin-bottom: 15px;
            color: #333;
        }

        .payment-options {
            display: flex;
            flex-direction: column;
            gap: 15px;
        }
.payment-option {
  display: flex;
  align-items: center;
  gap: 10px;
  padding: 12px;
  border: 1px solid #ddd;
  border-radius: 8px;
  transition: 0.3s;
  cursor: pointer;
}

.payment-option label {
  display: flex;
  align-items: center;
  gap: 10px;
  cursor: pointer;
  font-weight: 600;
  width: 100%;
}

.payment-option input[type="radio"] {
  margin: 0;
}

.payment-option:hover {
  border-color: #f26523;
  background-color: #fff7f2;
}

.payment-option.selected {
  border-color: #f26523;
  background-color: rgba(242, 101, 35, 0.08);
}

.payment-logo {
  width: auto;
  height: 40px;
  object-fit: contain;
}


        .payment-option-label {
            flex-grow: 1;
        }

        .payment-details {
            margin-top: 20px;
            padding: 15px;
            border: 1px solid #ddd;
            border-radius: 4px;
            display: none;
        }

        .payment-details.active {
            display: block;
        }

        .payment-instructions {
            margin-top: 10px;
            font-size: 14px;
            color: #666;
        }

        .payment-instructions ol {
            padding-left: 20px;
        }

        .payment-instructions li {
            margin-bottom: 5px;
        }

        .gcash-details {
            background-color: #f8f8f8;
            padding: 10px;
            border-radius: 4px;
            margin-top: 10px;
        }

        .gcash-number {
            font-weight: bold;
            color: #0073e6;
        }

        .store-details {
            background-color: #f8f8f8;
            padding: 10px;
            border-radius: 4px;
            margin-top: 10px;
        }

        .store-address {
            font-weight: bold;
        }

        .booking-summary {
            margin-top: 30px;
            padding: 20px;
            background-color: #f8f8f8;
            border-radius: 4px;
        }

        .summary-item {
            display: flex;
            justify-content: space-between;
            margin-bottom: 10px;
        }

        .summary-total {
            display: flex;
            justify-content: space-between;
            margin-top: 15px;
            padding-top: 15px;
            border-top: 1px solid #ddd;
            font-weight: bold;
            font-size: 18px;
        }

        .btn-book {
            display: block;
            width: 100%;
            padding: 12px;
            background-color: #f26523;
            color: white;
            border: none;
            border-radius: 4px;
            font-size: 16px;
            font-weight: bold;
            cursor: pointer;
            margin-top: 20px;
            transition: background-color 0.3s;
        }

        .btn-book:hover {
            background-color: #d9531e;
        }

        .btn-book:disabled {
            background-color: #ccc;
            cursor: not-allowed;
        }


        .error-message {
            color: #dc3545;
            font-size: 14px;
            margin-top: 5px;
        }

        .success-message {
            color: #28a745;
            font-size: 14px;
            margin-top: 5px;
        }

        .booking-confirmation {
            text-align: center;
            padding: 30px;
            display: none;
        }

        .confirmation-icon {
            font-size: 60px;
            color: #28a745;
            margin-bottom: 20px;
        }

        .confirmation-message {
            font-size: 24px;
            color: #333;
            margin-bottom: 20px;
        }

        .confirmation-details {
            margin-bottom: 30px;
        }

        .confirmation-details p {
            margin-bottom: 10px;
        }

        .btn-home {
            display: inline-block;
            padding: 10px 20px;
            background-color: #f26523;
            color: white;
            text-decoration: none;
            border-radius: 4px;
            font-weight: bold;
        }

        .loading-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(255, 255, 255, 0.8);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 1000;
            display: none;
        }

        .spinner {
            width: 50px;
            height: 50px;
            border: 5px solid #f3f3f3;
            border-top: 5px solid #f26523;
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }

        .readonly-field {
            background-color: #f5f5f5;
            cursor: not-allowed;
            border: 1px solid #ddd;
            color: #666;
        }

        .readonly-field:focus {
            outline: none;
            box-shadow: none;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        .modal {
            display: none;
            position: fixed;
            z-index: 1001;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            align-items: center;
            justify-content: center;
        }

        .modal-content {
            background-color: white;
            padding: 30px;
            border-radius: 8px;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.2);
            max-width: 400px;
            width: 90%;
            text-align: center;
            position: relative;
            animation: modalFadeIn 0.3s ease-out;
        }

        @keyframes modalFadeIn {
            from {
                opacity: 0;
                transform: translateY(-20px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .close-modal {
            position: absolute;
            top: 15px;
            right: 15px;
            font-size: 24px;
            font-weight: bold;
            color: #999;
            cursor: pointer;
            transition: color 0.2s;
        }

        .close-modal:hover {
            color: #333;
        }

        .modal-icon {
            margin-bottom: 20px;
        }

        .modal h2 {
            color: #333;
            margin-bottom: 15px;
        }

        .modal p {
            color: #666;
            margin-bottom: 25px;
            font-size: 16px;
        }

        .modal-buttons {
            display: flex;
            justify-content: center;
            gap: 15px;
        }

        .btn-primary {
            padding: 10px 20px;
            background-color: #f26523;
            color: white;
            border: none;
            border-radius: 4px;
            font-size: 16px;
            font-weight: bold;
            cursor: pointer;
            transition: background-color 0.3s;
        }

        .btn-primary:hover {
            background-color: #d9531e;
        }

        .btn-secondary {
            padding: 10px 20px;
            background-color: #e0e0e0;
            color: #333;
            border: none;
            border-radius: 4px;
            font-size: 16px;
            font-weight: bold;
            cursor: pointer;
            transition: background-color 0.3s;
        }

        .btn-secondary:hover {
            background-color: #d0d0d0;
        }
        
        /* Back button styles */
        .back-button {
            display: inline-block;
            padding: 8px 15px;
            background-color: #f26523;
            color: white;
            text-decoration: none;
            border-radius: 4px;
            font-weight: bold;
            transition: background-color 0.3s;
            cursor: pointer;
            border: none;
        }
        
        .back-button:hover {
            background-color: #d9531e;
        }
        
        /* Responsive navbar styles */
        @media (max-width: 992px) {
            nav ul {
                margin-left: 0;
                justify-content: flex-end;
                padding-right: 20px;
            }
            
            .back-button-wrapper {
                margin-right: auto;
            }
        }
        
        @media (max-width: 768px) {
            nav ul {
                padding-right: 10px;
                gap: 10px;
            }
            
            .back-button {
                padding: 6px 12px;
                font-size: 14px;
            }
        }
.hamburger-menu {
    display: none;
    flex-direction: column;
    justify-content: space-between;
    width: 30px;
    height: 21px;
    cursor: pointer;
    margin-right: 20px;
    z-index: 1001;
}

.hamburger-menu span {
    display: block;
    height: 3px;
    width: 100%;
    background-color: #333;
    border-radius: 3px;
    transition: all 0.3s ease;
}

.overlay-bg {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.5);
    z-index: 999;
}

.overlay-bg.active {
    display: block;
}

/* Hamburger menu animation */
.hamburger-menu.active span:nth-child(1) {
    transform: translateY(9px) rotate(45deg);
}

.hamburger-menu.active span:nth-child(2) {
    opacity: 0;
}

.hamburger-menu.active span:nth-child(3) {
    transform: translateY(-9px) rotate(-45deg);
}

/* Mobile menu styles */
@media (max-width: 768px) {
    .hamburger-menu {
        display: flex;
        position: absolute;
        right: 20px;
        top: 20px;
    }
    
    nav ul {
        position: fixed;
        top: 0;
        right: -100%;
        width: 250px;
        background-color: white;
        flex-direction: column;
        padding: 60px 20px 30px;
        transition: right 0.3s ease;
        box-shadow: -5px 0 15px rgba(0, 0, 0, 0.1);
        z-index: 1000;
        margin-left: 0;
        align-items: flex-start;
        gap: 15px;
        overflow-y: auto;
    }
    
    nav ul.active {
        right: 0;
    }
    
    nav ul li {
        width: 100%;
        margin: 0;
        padding: 0;
    }
    
    nav ul li a, 
    nav ul li button {
        display: block;
        width: 100%;
        padding: 8px 0;
        text-align: left;
        font-size: 16px;
    }
}
/* Add this after the existing modal styles */
.date-validation-modal {
    display: none;
    position: fixed;
    z-index: 1002;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.5);
    align-items: center;
    justify-content: center;
}

.date-validation-modal .modal-content {
    background-color: white;
    padding: 30px;
    border-radius: 8px;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.2);
    max-width: 400px;
    width: 90%;
    text-align: center;
    position: relative;
    animation: modalFadeIn 0.3s ease-out;
}

.date-validation-modal .modal-icon {
    font-size: 48px;
    color: #f26523;
    margin-bottom: 20px;
}

.date-validation-modal h2 {
    color: #333;
    margin-bottom: 15px;
}

.date-validation-modal p {
    color: #666;
    margin-bottom: 25px;
    font-size: 16px;
}
/* New styles for travel document section */
.travel-documents-section {
    background-color: #f8f9fa;
    padding: 20px;
    border-radius: 8px;
    margin: 20px 0;
    border-left: 4px solid #f26523;
}

.travel-documents-section h3 {
    color: #333;
    margin-bottom: 15px;
    display: flex;
    align-items: center;
}

.travel-documents-section h3::before {
    content: "✈️";
    margin-right: 10px;
    font-size: 20px;
}

.document-info {
    background-color: #e3f2fd;
    padding: 15px;
    border-radius: 6px;
    margin-bottom: 15px;
    border-left: 3px solid #2196f3;
}

.document-info h4 {
    color: #1976d2;
    margin-bottom: 10px;
    font-size: 16px;
}

.document-info ul {
    margin: 0;
    padding-left: 20px;
}

.document-info li {
    margin-bottom: 5px;
    color: #333;
}

.checkbox-group {
    display: flex;
    align-items: flex-start;
    margin-bottom: 15px;
}

.checkbox-group input[type="checkbox"] {
    width: auto;
    margin-right: 10px;
    margin-top: 3px;
}

.checkbox-group label {
    margin-bottom: 0;
    cursor: pointer;
    line-height: 1.4;
}

.warning-box {
    background-color: #fff3cd;
    border: 1px solid #ffeaa7;
    border-radius: 6px;
    padding: 15px;
    margin: 15px 0;
}

.warning-box h4 {
    color: #856404;
    margin-bottom: 10px;
    display: flex;
    align-items: center;
}

.warning-box h4::before {
    content: "⚠️";
    margin-right: 8px;
}

.warning-box p {
    color: #856404;
    margin: 0;
    font-size: 14px;
}

.form-section {
    margin-bottom: 30px;
    padding-bottom: 20px;
    border-bottom: 1px solid #eee;
}

.form-section:last-child {
    border-bottom: none;
}

.form-section h3 {
    color: #333;
    margin-bottom: 15px;
    font-size: 18px;
}
.requirement-box {
  background-color: #f9f9f9;
  border-left: 5px solid #007bff;
  padding: 15px 20px;
  border-radius: 6px;
  margin-bottom: 20px;
}

.requirement-box h3 {
  margin-bottom: 10px;
  color: #333;
  font-weight: 600;
}

.requirement-box ul {
  margin-left: 20px;
  line-height: 1.6;
}

.requirement-box li {
  margin-bottom: 5px;
}
.traveler-container {
  margin-top: 15px;
}

.traveler-card {
  border: 1px solid #ddd;
  border-radius: 10px;
  margin-bottom: 10px;
  overflow: hidden;
  background-color: #fff;
  box-shadow: 0 2px 5px rgba(0,0,0,0.05);
}

.traveler-header {
  background-color: #f26523;
  color: #fff;
  padding: 10px 15px;
  cursor: pointer;
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.traveler-header h4 {
  margin: 0;
}

.traveler-body {
  padding: 15px;
  background-color: #f9f9f9;
}

.toggle-icon {
  font-size: 18px;
  transition: transform 0.2s ease;
}
/* Tabs navigation */
.tab-list {
  list-style: none;
  display: flex;
  flex-wrap: wrap;
  margin: 10px 0;
  padding: 0;
  border-bottom: 2px solid #f26523;
}

.tab-item {
  padding: 8px 16px;
  cursor: pointer;
  background-color: #f8f9fa;
  border: 1px solid #ddd;
  border-bottom: none;
  border-radius: 6px 6px 0 0;
  margin-right: 5px;
  font-weight: 500;
  transition: 0.3s;
}

.tab-item.active {
  background-color: #f26523;
  color: #fff;
}

.tab-item:hover {
  background-color: #ffe1cc;
}

/* Form container */
.tab-content {
  border: 1px solid #ddd;
  border-radius: 0 0 10px 10px;
  background: #fff;
  padding: 15px 20px;
  box-shadow: 0 2px 5px rgba(0,0,0,0.05);
}

.traveler-form {
  animation: fadeIn 0.2s ease-in-out;
}

@keyframes fadeIn {
  from {opacity: 0;}
  to {opacity: 1;}
}
</style>
  <style>
    /* --- FORM WIZARD STYLES --- */
    .booking-container {
      max-width: 700px;
      margin: 40px auto;
      background: #fff;
      padding: 25px 35px;
      border-radius: 12px;
      box-shadow: 0 4px 15px rgba(0,0,0,0.1);
    }

    .progress-bar {
      background: #eee;
      border-radius: 6px;
      margin-bottom: 20px;
      height: 10px;
      overflow: hidden;
    }
    .progress {
      height: 10px;
      background-color: #f26523;
      width: 0%;
      transition: width 0.3s ease-in-out;
    }

    .form-step {
      display: none;
      animation: fadeIn 0.3s ease-in-out;
    }
    .form-step.active { display: block; }

    .step-nav {
      margin-top: 20px;
      display: flex;
      justify-content: space-between;
    }

    .next-btn, .prev-btn, .submit-btn {
      background-color: #f26523;
      color: white;
      border: none;
      padding: 10px 20px;
      border-radius: 6px;
      cursor: pointer;
    }
    .prev-btn { background-color: #888; }

    @keyframes fadeIn {
      from { opacity: 0; transform: translateY(20px); }
      to { opacity: 1; transform: translateY(0); }
    }

    .traveler-box {
      background: #fafafa;
      border: 1px solid #ddd;
      padding: 15px;
      border-radius: 8px;
      margin-bottom: 10px;
    }
    .summary-box {
      background: #f9f9f9;
      padding: 15px;
      border-radius: 10px;
      border: 1px solid #ddd;
    }
  </style>
  <style>
    :root {
  --primary: #f26523;
  --gray-light: #f6f6f6;
  --gray: #999;
  --text-dark: #333;
}

body {
  background-color: #fafafa;
  font-family: "Inter", Arial, sans-serif;
  color: var(--text-dark);
}

.booking-container {
  max-width: 750px;
  margin: 50px auto;
  background: #fff;
  padding: 35px 45px;
  border-radius: 16px;
  box-shadow: 0 4px 25px rgba(0, 0, 0, 0.08);
  transition: all 0.3s ease-in-out;
}

h2, h3 {
  color: var(--primary);
  margin-bottom: 15px;
}

.form-group {
  margin-bottom: 16px;
}

.form-group label {
  display: block;
  font-weight: 600;
  margin-bottom: 5px;
}

input, select, textarea {
  width: 100%;
  padding: 10px 12px;
  border: 1px solid #ccc;
  border-radius: 6px;
  font-size: 14px;
  outline: none;
  transition: all 0.2s;
}

input:focus, select:focus, textarea:focus {
  border-color: var(--primary);
  box-shadow: 0 0 0 2px rgba(242, 101, 35, 0.1);
}

.next-btn, .prev-btn, .submit-btn {
  background-color: var(--primary);
  color: #fff;
  border: none;
  padding: 10px 24px;
  border-radius: 6px;
  cursor: pointer;
  font-weight: 600;
  transition: background 0.3s;
}

.next-btn:hover, .submit-btn:hover {
  background-color: #d95514;
}

.prev-btn {
  background-color: #999;
}

.step-nav {
  margin-top: 25px;
  display: flex;
  justify-content: space-between;
}

.traveler-box {
  background-color: var(--gray-light);
  border: 1px solid #ddd;
  border-radius: 8px;
  padding: 15px;
  margin-bottom: 12px;
}

.progress-bar {
  background-color: #eaeaea;
  border-radius: 6px;
  overflow: hidden;
  height: 10px;
  margin-bottom: 15px;
}
.progress {
  height: 10px;
  background-color: var(--primary);
  width: 0%;
  transition: width 0.3s;
}

.summary-box {
  background-color: #f9f9f9;
  border-radius: 8px;
  padding: 15px;
  border: 1px solid #ddd;
  margin-top: 10px;
}

@keyframes fadeIn {
  from { opacity: 0; transform: translateY(20px); }
  to { opacity: 1; transform: translateY(0); }
}

  </style>
  <style>


/* 🧭 Progress Bar */
.progress-container {
  display: flex;
  align-items: center;
  justify-content: center;
  margin: 30px auto;
  width: 80%;
  position: relative;
}

.progress-bg {
  position: absolute;
  height: 5px;
  width: 100%;
  background: #e0e0e0;
  border-radius: 10px;
  top: 50%;
  transform: translateY(-50%);
  z-index: 0;
}

/* 🪄 Form Step Card */
.form-step {
  display: none;
  background: #fff;
  max-width: 750px;
  margin: 30px auto;
  padding: 25px 35px;
  border-radius: var(--border-radius);
  box-shadow: 0 4px 10px rgba(0,0,0,0.1);
  animation: fadeIn 0.4s ease;
}

.form-step.active {
  display: block;
}

@keyframes fadeIn {
  from { opacity: 0; transform: translateY(10px); }
  to { opacity: 1; transform: translateY(0); }
}

/* 🧍 Form Fields */
label {
  display: block;
  margin: 10px 0 5px;
  font-weight: 600;
}

input, select, textarea {
  width: 100%;
  padding: 10px 12px;
  border: 1px solid #ccc;
  border-radius: var(--border-radius);
  font-size: 15px;
  outline: none;
  transition: 0.3s;
}

input:focus, select:focus, textarea:focus {
  border-color: var(--primary-color);
  box-shadow: 0 0 4px rgba(242, 101, 35, 0.4);
}

textarea {
  resize: vertical;
}

/* 🧳 Traveler Box */
.traveler-box {
  background: #f7faff;
  border: 1px solid #d0e7ff;
  border-radius: var(--border-radius);
  padding: 15px 20px;
  margin: 15px 0;
}

.traveler-box h4 {
  color: var(--secondary-color);
  margin-top: 0;
}

/* 🔘 Buttons */
.form-nav {
  display: flex;
  justify-content: space-between;
  margin-top: 25px;
}

button {
  padding: 10px 18px;
  border: none;
  border-radius: var(--border-radius);
  font-size: 16px;
  font-weight: 600;
  cursor: pointer;
  transition: 0.3s ease;
}

button.next-btn {
  background: var(--primary-color);
  color: #fff;
}

button.prev-btn {
  background: #ccc;
  color: #333;
}

button.next-btn:hover {
  background: #e25510;
}

button.prev-btn:hover {
  background: #bbb;
}

/* 💳 Payment Instructions */
.payment-instructions {
  background: #fff7e6;
  border-left: 5px solid var(--primary-color);
  padding: 15px 20px;
  border-radius: var(--border-radius);
  margin-top: 15px;
  display: none;
}

.payment-instructions.active {
  display: block;
}

.payment-instructions strong {
  color: var(--primary-color);
}

@media (max-width: 768px) {
  .form-step {
    padding: 20px;
  }
  .progress-container {
    width: 95%;
  }
}
</style>
<style>
.modal {
  display: none;
  position: fixed;
  z-index: 2000;
  left: 0; top: 0;
  width: 100%; height: 100%;
  background: rgba(0,0,0,0.6);
  justify-content: center; align-items: center;
}
.modal-content {
  background: #fff;
  border-radius: 12px;
  padding: 25px;
  box-shadow: 0 0 20px rgba(0,0,0,0.3);
  animation: fadeIn 0.2s ease-in-out;
}
.modal-btn {
  margin-top: 10px;
  background-color: #007bff;
  color: white;
  border: none;
  border-radius: 6px;
  padding: 8px 16px;
  cursor: pointer;
}
@keyframes fadeIn { from {opacity:0;} to {opacity:1;} }
</style>
 <style>
    /* minimal page styles for wizard & overlays */
    .form-step { display: none; }
    .form-step.active { display: block; }
    .progress-bar { height: 8px; background:#eee; border-radius:6px; overflow:hidden; margin-bottom:10px; }
    .progress { height:100%; width:0; background:#2c7a7b; transition:width .25s ease; }
    .step-nav { margin-top:18px; display:flex; gap:8px; justify-content:flex-end; }
    .next-btn, .prev-btn, .submit-btn, .btn-home { padding:8px 14px; border-radius:6px; border:none; cursor:pointer; }
    .next-btn { background:#2c7a7b; color:#fff; }
    .prev-btn { background:#f0f0f0; }
    .submit-btn { background:#1f6f6f; color:#fff; }
    .error-field { border:1px solid #dc3545 !important; background:#fff0f0; }
    .error-message { color:#dc3545; font-size:13px; margin-top:4px; }
    .traveler-box{ border:1px solid #ddd; padding:12px; border-radius:8px; margin-bottom:12px; }
    .payment-details { display:none; margin-top:10px; border:1px dashed #ddd; padding:10px; border-radius:8px; }
    /* confirmation overlay (you had this markup) */
    #bookingConfirmation { display:none; }
    /* loading overlay */
    #loadingOverlay { display:none; position:fixed; inset:0; background:rgba(0,0,0,0.6); z-index:9999; justify-content:center; align-items:center; }
    #loadingOverlay .box { background:#fff; padding:20px 26px; border-radius:10px; text-align:center; }
    @keyframes spin { to { transform:rotate(360deg); } }
    .spinner { width:48px;height:48px;border:5px solid #eee;border-top-color:#2c7a7b;border-radius:50%;animation:spin 1s linear infinite; margin:0 auto 12px; }
  #travelerTabContent {
  display: block;
  width: 100%;
  min-height: auto;
  overflow: visible;
}
.traveler-form {
  display: block;
  padding: 1rem;
  width: 100%;
  box-sizing: border-box;
}

  </style>

</head>
<body>
    <header>
        <div class="logo">
            <img src="/images/Image-logo.png" alt="Logo">
            <img src="/images/Text-logo.png" alt="Logo">
        </div>
        <div class="top-contact-bar">
            <div class="contact-info">
                <span style="display: none">📞 09361055665</span>
            <a href="https://www.facebook.com/abeetravelandtours" target="_blank" class="contact-icon" style="visibility: hidden">
                <img src="/images/communication.png" alt="Facebook" class="facebook-logo">
            </a>
            </div>
        </div>
        <nav>
            <ul>
                <li class="back-button-wrapper">
                    <button id="backButton" class="back-button" style="background: none; color: black;">Home</button>
                </li>
                
                <li id="loginBtnWrapper">
                    <button id="loginBtn">Login</button>
                </li>
                <li id="userProfile" style="display: none;">
                    <a href="javascript:void(0);" id="profileIconWrapper">
                        <img src="/images/profile.png" alt="User Profile" id="profileIcon" class="profile-icon">
                    </a>
                    <ul id="profileDropdown" class="dropdown-menu" style="display: none;">
                        <li><a href="/profile">Profile</a></li>
                        <li><a href="/settings">Settings</a></li>
                        <li><a href="/logout" id="logoutBtn">Logout</a></li>
                    </ul>
                </li>
            </ul>
        </nav>
    </header>
  <div class="booking-container">
    <h2>Book Your Tour</h2>

    <!-- Progress -->
    <div class="progress-bar"><div class="progress" id="progress"></div></div>
    <p>Step <span id="stepNumber">1</span> of 6</p>

    <form id="bookingForm">
      <input type="hidden" id="tourId" name="tourId" value="<%= tour?._id %>">

      <!-- STEP 1: Personal Info -->
      <div class="form-step active" id="step1">
        <h3>Personal Information</h3>

        <div class="form-group">
          <label>Full Name*</label>
          <input type="text" id="fullName" name="fullName" required>
        </div>

        <div class="form-group">
          <label>Birthdate</label>
          <input type="date" id="birthdate" name="birthdate">
        </div>

        <div class="form-group">
          <label>Sex</label>
          <select id="sex" name="sex">
            <option value="">Select</option>
            <option value="Male">Male</option>
            <option value="Female">Female</option>
          </select>
        </div>

        <div class="form-group">
          <label>Email*</label>
          <input type="email" id="email" name="email" required>
        </div>

        <div class="form-group">
          <label>Phone Number*</label>
          <input type="text" id="phone" name="phone" required>
        </div>

        <div class="form-group">
          <label>Nationality*</label>
          <input type="text" id="nationality" name="nationality" required>
        </div>

        <div class="form-group">
          <label>Passport Number*</label>
          <input type="text" id="passportNumber" name="passportNumber" required>
        </div>

        <div class="form-group">
          <label>Passport Expiry*</label>
          <input type="date" id="passportExpiry" name="passportExpiry" required>
        </div>

        <div class="form-group">
          <label>Emergency Contact Name (optional)</label>
          <input type="text" id="emergencyName" name="emergencyName">
        </div>

        <div class="form-group">
          <label>Emergency Contact Number (optional)</label>
          <input type="text" id="emergencyContact" name="emergencyContact">
        </div>

        <div class="step-nav">
          <button type="button" class="next-btn" onclick="nextStep()">Next</button>
        </div>
      </div>

      <!-- STEP 2: Travel Requirements -->
      <div class="form-step" id="step2">
        <h3>Travel Requirements</h3>
        <div id="requirementsBox">
          <% if (tour && tour.requirements) { %>
            <ul>
              <% if (tour.requirements.visaRequired) { %><li>Visa required</li><% } %>
              <% if (tour.requirements.passportRequired) { %><li>Valid Passport (≥ <%= tour.requirements.passportValidityMonths %> months)</li><% } %>
              <% if (tour.requirements.travelInsuranceRequired) { %><li>Travel insurance required</li><% } %>
              <% if (tour.requirements.vaccinationRequired) { %><li>Vaccination required</li><% } %>
              <% if (tour.requirements.otherRequirements) { %><li><%= tour.requirements.otherRequirements %></li><% } %>
            </ul>
          <% } else { %>
            <p>No specific requirements listed for this tour.</p>
          <% } %>
        </div>

        <div class="checkbox-group">
        <input type="checkbox" id="requirementsConfirm">
        <label for="requirementsConfirm">I confirm that I meet all the above travel requirements</label>
      </div>


        <div class="step-nav">
          <button type="button" class="prev-btn" onclick="prevStep()">Back</button>
          <button type="button" class="next-btn" onclick="nextStep()">Next</button>
        </div>
      </div>

      <!-- STEP 3: Travelers -->
      <div class="form-step" id="step3">
        <h3>Travelers</h3>
        <div class="form-group">
          <label>Number of Travelers*</label>
          <input type="number" id="travelers" name="travelers" min="1" max="30" value="1" required>
        </div>

        <div id="travelerDetailsContainer"></div>

        <div class="step-nav">
          <button type="button" class="prev-btn" onclick="prevStep()">Back</button>
          <button type="button" class="next-btn" onclick="nextStep()">Next</button>
        </div>
      </div>

      <!-- STEP 4: Dates & Requests -->
      <div class="form-step" id="step4">
        <h3>Dates and Special Requests</h3>

        <div class="form-group">
          <label>Start Date*</label>
          <input type="date" id="startDate" name="startDate" required>
        </div>

        <div class="form-group">
          <label>Special Requests (optional)</label>
          <textarea id="specialRequests" name="specialRequests" rows="3"></textarea>
        </div>

        <div class="step-nav">
          <button type="button" class="prev-btn" onclick="prevStep()">Back</button>
          <button type="button" class="next-btn" onclick="nextStep()">Next</button>
        </div>
      </div>

      <!-- STEP 5: Payment -->
      <div class="form-step" id="step5">
        <h3>Payment Method</h3>

        <div class="payment-methods">
          <div class="payment-options">
            <div class="payment-option" data-method="gcash">
              <input type="radio" id="gcash" name="paymentMethod" value="gcash">
              <img src="/images/gcash.png" alt="GCash" class="payment-logo">
              <label for="gcash" class="payment-option-label">GCash</label>
            </div>

            <div class="payment-option" data-method="store">
              <input type="radio" id="store" name="paymentMethod" value="store">
              <img src="/images/shop.png" alt="In-store" class="payment-logo">
              <label for="store" class="payment-option-label">Pay in Store</label>
            </div>
          </div>

          <div id="gcashDetails" class="payment-details">
            <p>Please send your payment to our GCash account:</p>
            <p>Account Name: <strong>A.BEE Travel and Tours</strong></p>
            <p>GCash Number: <strong>09361055665</strong></p>
            <div class="payment-instructions">
              <p>Instructions:</p>
              <ol>
                <li>Open your GCash app</li>
                <li>Tap on "Send Money"</li>
                <li>Enter the GCash number above</li>
                <li>Enter the total amount</li>
                <li>In the message field, include your name and booking reference</li>
                <li>Complete the payment</li>
                <li>Upload your payment receipt below</li>
              </ol>
            </div>
            <div class="form-group">
              <label for="gcashReceipt">Upload Payment Receipt*</label>
              <input type="file" id="gcashReceipt" name="gcashReceipt" accept="image/*">
            </div>
          </div>

          <div id="storeDetails" class="payment-details">
            <p>Visit our office to complete your payment:</p>
            <p class="store-address"><strong>A.BEE Travel and Tours</strong></p>
            <p>Ground Level, Robinsons Townville, H. Concepcion, Cabanatuan City</p>
            <p>Business Hours: Monday-Friday, 9:00 AM - 5:00 PM</p>
            <p>Contact: (044) 604 7273</p>
            <div class="payment-instructions">
              <p>Instructions:</p>
              <ol>
                <li>Visit our office during business hours</li>
                <li>Mention your booking reference number</li>
                <li>Make your payment via cash, credit or debit card</li>
                <li>Receive your booking confirmation</li>
              </ol>
            </div>
          </div>
        </div>

        <div class="step-nav">
          <button type="button" class="prev-btn" onclick="prevStep()">Back</button>
          <button type="button" class="next-btn" onclick="nextStep()">Next</button>
        </div>
      </div>
<!-- ✅ STEP 6: Booking Summary -->
<div class="form-step" id="step6">
  <h3>Booking Summary</h3>
  <div class="summary-box" id="bookingSummary">
    <p><strong>Tour:</strong> <span id="summaryTour"><%= tour?.title %></span></p>
    
    <p><strong>Destination:</strong> 
      <span id="summaryDestination">
        <%= tour?.destination %><%= tour?.country ? ', ' + tour.country : '' %>
      </span>
    </p>

    <!-- ✅ Include base price for calculation -->
    <p><strong>Price per person:</strong> ₱<span id="tourPrice"><%= typeof tour?.price === 'number' ? tour.price.toLocaleString() : parseFloat(tour?.price).toLocaleString() %></span></p>
    
    <!-- ✅ Travelers count will be dynamically updated -->
    <p><strong>Travelers:</strong> <span id="summaryTravelers">1</span></p>
    
    <!-- ✅ Total updates automatically via updateTotalPrice() -->
    <div class="summary-total">
      <span><strong>Total:</strong></span>
      <span id="summaryTotal">₱<%= typeof tour?.price === 'number' ? tour.price.toLocaleString() : parseFloat(tour?.price).toLocaleString() %></span>
    </div>
  </div>

  <div class="step-nav">
    <button type="button" class="prev-btn" onclick="prevStep()">Back</button>
    <button type="submit" class="submit-btn">Confirm Booking</button>
  </div>
</div>
<input type="hidden" name="totalAmount" id="totalAmount" value="0">
    </form>

    <!-- Existing confirmation markup (we'll show this overlay on success) -->
    <div id="bookingConfirmation" class="booking-confirmation" style="display:none;">
      <div class="confirmation-icon">✓</div>
      <h2 class="confirmation-message">Booking Pending</h2>
      <p>Thank you for booking with A.BEE Travel and Tours.</p>
        <p>Your booking reference number: <strong id="bookingReference"></strong></p>
        <p>We have sent a confirmation email to <strong id="confirmationEmail"></strong>.</p>
        <p id="paymentInstructions">Your booking is currently pending. Please complete your selected payment to confirm your slot.</p>

      <div style="display:flex;gap:10px;justify-content:center;margin-top:12px;">
        <a href="javascript:void(0);" onclick="returnToHome()" class="btn-home">Return to Home</a>
        <a href="tel:+63446047273" class="btn-home" style="background:#fff;color:#2c7a7b;border:1px solid #2c7a7b;">Contact Us</a>
      </div>
      <div style="margin-top:12px;color:#666;text-align:center;">
        <p>📞 (044) 604 7273 &nbsp;&nbsp; 📞 09361055665 &nbsp;&nbsp; 📧 abeetravelandtours@gmail.com</p>
      </div>
    </div>

    <!-- loading overlay -->
    <div id="loadingOverlay" style="display:none; align-items:center; justify-content:center;">
      <div class="box">
        <div class="spinner"></div>
        <p>Processing your booking…</p>
      </div>
    </div>
    <div id="errorModal" class="modal">
        <div class="modal-content">
            <span class="close-modal">&times;</span>
            <div class="modal-icon">
                <svg xmlns="http://www.w3.org/2000/svg" width="64" height="64" viewBox="0 0 24 24" fill="none" stroke="#f26523" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <circle cx="12" cy="12" r="10"></circle>
                    <line x1="12" y1="8" x2="12" y2="12"></line>
                    <line x1="12" y1="16" x2="12.01" y2="16"></line>
                </svg>
            </div>
            <h2>Login Required</h2>
            <p>Please log in to complete your booking.</p>
            <div class="modal-buttons">
                <button id="loginRedirectBtn" class="btn-primary">Login Now</button>
                <button id="cancelModalBtn" class="btn-secondary">Cancel</button>
            </div>
        </div>
    </div>

<div id="dateValidationModal" class="date-validation-modal">
    <div class="modal-content">
        <span class="close-modal">&times;</span>
        <div class="modal-icon">
            ⚠️
        </div>
        <h2>Invalid Date Selection</h2>
        <p>Start Date should not be today or past dates and should be 7 days in advance.</p>
        <div class="modal-buttons">
            <button id="dateValidationOkBtn" class="btn-primary">OK</button>
        </div>
    </div>
</div>
</div> 
    <footer class="footer-columns">
        <div class="footer-content">
            <div class="footer-left">
                <h3>Contact Us</h3>
                <p>📞 (044) 604 7273</p>
                <p>📞 09361055665</p>
                <p>📧 <a href="mailto:abeetravelandtours@gmail.com">abeetravelandtours@gmail.com</a></p>
            </div>
            <div class="footer-right">
            <h3>Follow Us</h3>
            <a href="https://www.facebook.com/abeetravelandtours" target="_blank">
                <img src="/images/communication.png" alt="Facebook" class="social-icon facebook-logo">
            </a>
            <a href="https://www.instagram.com/a.bee_travelandtours/" target="_blank">
                <img src="/images/instagram.png" alt="Instagram" class="social-icon instagram-logo">
            </a>
        </div>
        </div>
        <p class="footer-bottom">Copyright &copy; 2025 A.BEE Travel and Tours Website. All rights reserved.</p>
    </footer>

    <script>
        let isLoggedIn = false;
        let userData = null;
        
        document.addEventListener('DOMContentLoaded', function() {
            checkAuthStatus();
            updateNavbarUI();
            setupEventListeners();
           
            const urlParams = new URLSearchParams(window.location.search);
            const tourId = urlParams.get('id');
            
            if (tourId) {
                document.getElementById('tourId').value = tourId;
                fetchTourDetails(tourId);
            } else {
                alert('No tour selected. Please choose a tour first.');
                window.location.href = '/';
            }
            
            checkAuthStatus();
const backButton = document.getElementById('backButton');
if (backButton) {
    backButton.addEventListener('click', function() {
        window.location.href = '/';
    });
}
            if (sessionStorage.getItem('isLoggedIn') === 'true') {
                isLoggedIn = true;
                try {
                    userData = JSON.parse(sessionStorage.getItem('userData'));
                } catch (e) {
                    console.error('Error parsing stored user data:', e);
                }
                updateUIForLoggedInUser();
            }
        });
        function fetchTourDetails(tourId) {
    showLoading();
    
    fetch(`/api/tours/${tourId}`)
        .then(response => {
            if (!response.ok) {
                throw new Error('Tour not found');
            }
            return response.json();
        })
        .then(tour => {
            window.tourData = tour;
            document.getElementById('tourImage').src = tour.imageUrl;
            document.getElementById('tourTitle').textContent = tour.title;
            
            const destinationText = tour.country ? 
                `Destination: ${tour.destination}, ${tour.country}` : 
                `Destination: ${tour.destination}`;
            document.getElementById('tourDestination').textContent = destinationText;
            
            document.getElementById('tourDuration').textContent = `Duration: ${tour.duration} ${tour.durationUnit}`;
            document.getElementById('tourDescription').textContent = tour.description;
            
            const formattedPrice = typeof tour.price === 'number' ? 
                `₱${tour.price.toLocaleString()}` : 
                `₱${parseFloat(tour.price).toLocaleString()}`;
            document.getElementById('tourPrice').textContent = formattedPrice;
            
            updateTotalPrice();
            hideLoading();
        })
        .catch(error => {
            console.error('Error fetching tour details:', error);
            alert('Error loading tour details. Please try again.');
            hideLoading();
        });
}
function setMinimumDate() {
    const today = new Date();
    const minDate = new Date(today);
    minDate.setDate(today.getDate() + 7);
    
    const startDateInput = document.getElementById('startDate');
    if (startDateInput) {
        const formattedMinDate = minDate.toISOString().split('T')[0];
        startDateInput.setAttribute('min', formattedMinDate);
    }
}

function validateStartDate(selectedDate) {
    const today = new Date();
    const selected = new Date(selectedDate);
    const minDate = new Date(today);
    minDate.setDate(today.getDate() + 7);
    
    today.setHours(0, 0, 0, 0);
    selected.setHours(0, 0, 0, 0);
    minDate.setHours(0, 0, 0, 0);
    
    return selected >= minDate;
}
function showDateValidationModal() {
    const modal = document.getElementById('dateValidationModal');
    modal.style.display = 'flex';
}
function closeDateValidationModal() {
    const modal = document.getElementById('dateValidationModal');
    modal.style.display = 'none';
}
setMinimumDate();

const startDateInput = document.getElementById('startDate');
if (startDateInput) {
    startDateInput.addEventListener('change', function() {
        const selectedDate = this.value;
        if (selectedDate && !validateStartDate(selectedDate)) {
            showDateValidationModal();
            this.value = '';
        }
    });
    
    startDateInput.addEventListener('blur', function() {
        const selectedDate = this.value;
        if (selectedDate && !validateStartDate(selectedDate)) {
            showDateValidationModal();
            this.value = '';
        }
    });
}
const dateValidationModal = document.getElementById('dateValidationModal');
if (dateValidationModal) {
    document.getElementById('dateValidationOkBtn').addEventListener('click', closeDateValidationModal);
    dateValidationModal.querySelector('.close-modal').addEventListener('click', closeDateValidationModal);
    dateValidationModal.addEventListener('click', function(event) {
        if (event.target === dateValidationModal) {
            closeDateValidationModal();
        }
    });
}

        function setupEventListeners() {
            
           document.getElementById('tourBookingForm').addEventListener('submit', function(e) {
    e.preventDefault();
    if (!isLoggedIn) {
        showErrorModal('Please log in to complete your booking.');
        return;
    }
    const nationality = document.getElementById('nationality').value;
    if (!nationality) {
        alert('Please enter your nationality.');
        return;
    }
    const passportValid = document.getElementById('passportValid').checked;
    const visaAware = document.getElementById('visaAware').checked;
    const documentResponsibility = document.getElementById('documentResponsibility').checked;
    
    if (!passportValid || !visaAware || !documentResponsibility) {
        alert('Please confirm all travel document requirements before proceeding.');
        return;
    }
    const selectedPayment = document.querySelector('input[name="paymentMethod"]:checked');
    if (!selectedPayment) {
        alert('Please select a payment method.');
        return;
    }
    processBooking(selectedPayment.value);
});
            const paymentOptions = document.querySelectorAll('.payment-option');
            paymentOptions.forEach(option => {
                option.addEventListener('click', function() {
                    const method = this.dataset.method;
                    const radio = this.querySelector('input[type="radio"]');
                    
                    radio.checked = true;
                    paymentOptions.forEach(opt => opt.classList.remove('selected'));
                    this.classList.add('selected');
        
                    document.querySelectorAll('.payment-details').forEach(detail => {
                        detail.classList.remove('active');
                    });
                    document.getElementById(`${method}Details`).classList.add('active');
                
                    const bookButton = document.getElementById('bookButton');
                    if (method === 'gcash') {
                        bookButton.style.display = 'block';
                        bookButton.textContent = 'Submit Booking with GCash';
                    } else if (method === 'store') {
                        bookButton.style.display = 'block';
                        bookButton.textContent = 'Reserve for In-Store Payment';
                        
                        document.querySelector('#storeDetails p:last-child').innerHTML = 
                            '<strong>Note:</strong> Your booking will be reserved for 8 hours only. If payment is not received within this time, your reservation will be automatically cancelled.';
                    }
                });
            });
            document.getElementById('travelers').addEventListener('change', function() {
                updateTotalPrice();
            });
            
            
        }
        
      function processBooking(paymentMethod, paymentId = null) {
    const startDate = document.getElementById('startDate').value;
    if (!startDate || !validateStartDate(startDate)) {
        showDateValidationModal();
        return;
    }
    showLoading();
    const form = document.getElementById('tourBookingForm');
    const formData = new FormData(form);
    const totalAmount = document.getElementById('summaryTotal').textContent
        .replace('₱', '')
        .replace(/,/g, '');

    if (paymentMethod === 'gcash') {
        const receiptFile = document.getElementById('gcashReceipt').files[0];
        
        if (!receiptFile) {
            hideLoading();
            alert('Please upload your GCash payment receipt');
            return;
        }
        const uploadData = new FormData();
        uploadData.append('receipt', receiptFile);
        
        fetch('/api/test-upload', {
            method: 'POST',
            body: uploadData,
            credentials: 'include'
        })
        .then(response => {
            if (!response.ok) {
                throw new Error('Failed to upload receipt');
            }
            return response.json();
        })
        .then(uploadResult => {
            const bookingData = {
                tourId: formData.get('tourId'),
                fullName: formData.get('fullName'),
                email: formData.get('email'),
                phone: formData.get('phone'),
                nationality: formData.get('nationality'),
                travelers: parseInt(formData.get('travelers')),
                startDate: formData.get('startDate'),
                specialRequests: formData.get('specialRequests'),
                paymentMethod: paymentMethod,
                paymentId: paymentId,
                receiptUrl: uploadResult.fileUrl,
                totalAmount: parseFloat(totalAmount),
                budget: totalAmount,
                endDate: formData.get('startDate'),
                middleInitial: userData?.middleInitial || null,
                suffix: userData?.suffix || null,
                country: window.tourData?.country || null
            };
            
            submitBooking(bookingData);
        })
        .catch(error => {
            console.error('Error uploading receipt:', error);
            alert('Error uploading receipt. Please try again.');
            hideLoading();
        });
    } else {
        const bookingData = {
            tourId: formData.get('tourId'),
            fullName: formData.get('fullName'),
            email: formData.get('email'),
            phone: formData.get('phone'),
            nationality: formData.get('nationality'),
            travelers: parseInt(formData.get('travelers')),
            startDate: formData.get('startDate'),
            specialRequests: formData.get('specialRequests'),
            paymentMethod: paymentMethod,
            paymentId: paymentId,
            totalAmount: parseFloat(totalAmount),
            budget: totalAmount,
            endDate: formData.get('startDate'),
            middleInitial: userData?.middleInitial || null,
            suffix: userData?.suffix || null,
            country: window.tourData?.country || null
        };
        
        submitBooking(bookingData);
    }
}
function collectTravelerDetails() {
  const container = document.getElementById('travelerDetailsContainer');
  const cards = container.querySelectorAll('.traveler-card');
  const arr = [];
  cards.forEach((card, idx) => {
    const prefix = `traveler_${idx}_`;
    arr.push({
      fullName: card.querySelector(`[name="${prefix}fullName"]`).value.trim(),
      nationality: card.querySelector(`[name="${prefix}nationality"]`).value.trim(),
      birthdate: card.querySelector(`[name="${prefix}birthdate"]`).value || null,
      sex: card.querySelector(`[name="${prefix}sex"]`).value || null,
      passportNumber: card.querySelector(`[name="${prefix}passportNumber"]`).value.trim() || null,
      passportExpiry: card.querySelector(`[name="${prefix}passportExpiry"]`).value || null,
      specialRequests: card.querySelector(`[name="${prefix}specialRequests"]`).value.trim() || null
    });
  });
  return arr;
}

bookingData.travelerDetails = collectTravelerDetails();


        function submitBooking(bookingData) {
            fetch('/submit-booking', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(bookingData),
                credentials: 'include'
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Failed to submit booking');
                }
                return response.json();
            })
            .then(data => {
                hideLoading();
                
                if (data.success) {
                    const bookingRef = data.bookingReference || data.bookingId || generateBookingReference();
                    showBookingConfirmation(bookingData, bookingRef);
                } else {
                    alert(data.message || 'Failed to submit booking. Please try again.');
                }
            })
            .catch(error => {
                console.error('Error submitting booking:', error);
                alert('Error submitting booking. Please try again.');
                hideLoading();
            });
        }
        function showBookingConfirmation(bookingData, bookingRef) {
            document.getElementById('bookingForm').style.display = 'none';
            const confirmation = document.getElementById('bookingConfirmation');
            confirmation.style.display = 'block';
            
            document.getElementById('bookingReference').textContent = bookingRef;
            document.getElementById('confirmationEmail').textContent = bookingData.email;
            const paymentInstructions = document.getElementById('paymentInstructions');
            if (bookingData.paymentMethod === 'gcash') {
                paymentInstructions.textContent = 'We have received your GCash payment. Our team will verify it shortly.';
            } else if (bookingData.paymentMethod === 'store') {
                paymentInstructions.innerHTML = '<strong>Important:</strong> Please visit our office within 8 hours to complete your payment. Your booking will be automatically cancelled if payment is not received within this time.';
            }
            
            isLoggedIn = true;
            localStorage.setItem("isLoggedIn", "true");
            sessionStorage.setItem("isLoggedIn", "true");
            
            if (userData) {
                sessionStorage.setItem("userData", JSON.stringify(userData));
            }
            sessionStorage.setItem("bookingSuccess", "true");
            updateUIForLoggedInUser();
            
            setTimeout(() => {
                window.location.href = '/?booking=success&timestamp=' + new Date().getTime();
            }, 15000);
        }
        
        

        function generateBookingReference() {
            const prefix = 'ABEE';
            const timestamp = Date.now().toString().slice(-6);
            const random = Math.floor(Math.random() * 10000).toString().padStart(4, '0');
            return `${prefix}-${timestamp}-${random}`;
        }

        function showLoading() {
            document.getElementById('loadingOverlay').style.display = 'flex';
        }

        function hideLoading() {
            document.getElementById('loadingOverlay').style.display = 'none';
        }
        
        function updateUIForLoggedInUser() {
            document.getElementById('loginBtnWrapper').style.display = 'none';
            document.getElementById('userProfile').style.display = 'block';
        }
        
        function checkAuthStatus() {
            if (sessionStorage.getItem("isLoggedIn") === "true") {
                isLoggedIn = true;
                updateUIForLoggedInUser();
                fetchUserData();
                return;
            }
            fetch('/check-auth')
                .then(response => response.json())
                .then(data => {
                    isLoggedIn = data.isLoggedIn;
                    
                    if (isLoggedIn) {
                        sessionStorage.setItem("isLoggedIn", "true");
                        updateUIForLoggedInUser();
                        fetchUserData();
                    } else {
                        document.getElementById('loginBtnWrapper').style.display = 'block';
                        document.getElementById('userProfile').style.display = 'none';
                    }
                })
                .catch(error => {
                    console.error('Error checking authentication status:', error);
                    isLoggedIn = false;
                });
        }
function fetchUserData() {
    if (!isLoggedIn) return;
    
    console.log("Fetching user data...");
    
    fetch('/api/user-profile', {
        credentials: 'include'  
    })
    .then(response => {
        console.log("Response status:", response.status);
        if (!response.ok) {
            throw new Error('Failed to fetch user data');
        }
        return response.json();
    })
    .then(data => {
        userData = data;
        console.log("User data received:", userData);
        
        sessionStorage.setItem('userData', JSON.stringify(userData));
        
        if (userData) {
            let fullName = userData.firstName || '';
            if (userData.middleInitial) {
                fullName += ' ' + userData.middleInitial + '.';
            }
            if (userData.lastName) {
                fullName += ' ' + userData.lastName;
            }
            if (userData.suffix) {
                fullName += ', ' + userData.suffix;
            }
            
            fullName = fullName.trim();
            
            if (fullName) {
                const fullNameField = document.getElementById('fullName');
                fullNameField.value = fullName;
                fullNameField.readOnly = true;
                fullNameField.classList.add('readonly-field');
            }
            
            if (userData.email) {
                const emailField = document.getElementById('email');
                emailField.value = userData.email;
                emailField.readOnly = true;
                emailField.classList.add('readonly-field');
            }
            
            if (userData.phoneNumber) {
                const phoneField = document.getElementById('phone');
                phoneField.value = userData.phoneNumber;
                phoneField.readOnly = true;
                phoneField.classList.add('readonly-field');
            }
            if (userData.nationality) {
                const nationalityField = document.getElementById('nationality');
                nationalityField.value = userData.nationality;
                nationalityField.readOnly = true;
                nationalityField.classList.add('readonly-field');
            }
            if (userData.birthdate) {
              const birthdateField = document.getElementById('birthdate');
              const dateValue = new Date(userData.birthdate).toISOString().split('T')[0];
              birthdateField.value = dateValue;
              birthdateField.readOnly = true;
              birthdateField.classList.add('readonly-field');
            }

            if (userData.sex) {
              const sexField = document.getElementById('sex');
              sexField.value = userData.sex.charAt(0).toUpperCase() + userData.sex.slice(1).toLowerCase();
              sexField.readOnly = true;
              sexField.classList.add('readonly-field');
            }

        }
    })
    .catch(error => {
        console.error('Error fetching user data:', error);
    });
}
        document.addEventListener('DOMContentLoaded', function() {
            const profileIcon = document.getElementById('profileIconWrapper');
            const profileDropdown = document.getElementById('profileDropdown');
            
            if (profileIcon) {
                profileIcon.addEventListener('click', function(e) {
                    e.stopPropagation();
                    profileDropdown.style.display = profileDropdown.style.display === 'block' ? 'none' : 'block';
                });
            }
            
            document.addEventListener('click', function() {
                if (profileDropdown) {
                    profileDropdown.style.display = 'none';
                }
            });
            const loginBtn = document.getElementById('loginBtn');
            if (loginBtn) {
                loginBtn.addEventListener('click', function() {
                    window.location.href = '/login';
                });
            }
        });
        function showErrorModal(message) {
            const modal = document.getElementById('errorModal');
            const modalMessage = document.querySelector('#errorModal p');
            
            if (message) {
                modalMessage.textContent = message;
            }
            modal.style.display = 'flex';
            document.querySelector('.close-modal').addEventListener('click', closeErrorModal);
            document.getElementById('cancelModalBtn').addEventListener('click', closeErrorModal);
            document.getElementById('loginRedirectBtn').addEventListener('click', function() {
                window.location.href = '/login';
            });
            window.addEventListener('click', function(event) {
                if (event.target === modal) {
                    closeErrorModal();
                }
            });
        }
        function closeErrorModal() {
            document.getElementById('errorModal').style.display = 'none';
        }
        const modal = document.getElementById('errorModal');
        if (modal) {
            document.querySelector('.close-modal').addEventListener('click', closeErrorModal);
            document.getElementById('cancelModalBtn').addEventListener('click', closeErrorModal);
            document.getElementById('loginRedirectBtn').addEventListener('click', function() {
                window.location.href = '/login';
            });
            window.addEventListener('click', function(event) {
                if (event.target === modal) {
                    closeErrorModal();
                }
            });
        }
        document.addEventListener('DOMContentLoaded', function() {
    const header = document.querySelector('header');
    if (header && !header.querySelector('.hamburger-menu')) {
        const hamburgerMenu = document.createElement('div');
        hamburgerMenu.className = 'hamburger-menu';
        hamburgerMenu.innerHTML = '<span></span><span></span><span></span>';
        header.appendChild(hamburgerMenu);
        
        if (!document.querySelector('.overlay-bg')) {
            const overlayBg = document.createElement('div');
            overlayBg.className = 'overlay-bg';
            document.body.appendChild(overlayBg);
        }
    }
    
    const navUl = document.querySelector('nav ul');
    if (navUl) {
        const homeLink = navUl.querySelector('li a[href="/"]');
        if (homeLink) {
            homeLink.textContent = 'Go Back';
            homeLink.href = 'javascript:history.back()';
        }
    }
    const hamburgerMenu = document.querySelector('.hamburger-menu');
    const navMenu = document.querySelector('nav ul');
    const overlayBg = document.querySelector('.overlay-bg');
    
    if (hamburgerMenu && navMenu && overlayBg) {
        hamburgerMenu.addEventListener('click', function(e) {
            e.stopPropagation();
            this.classList.toggle('active');
            navMenu.classList.toggle('active');
            overlayBg.classList.toggle('active');
            
            document.body.style.overflow = navMenu.classList.contains('active') ? 'hidden' : '';
        });
        overlayBg.addEventListener('click', function() {
            hamburgerMenu.classList.remove('active');
            navMenu.classList.remove('active');
            this.classList.remove('active');
            document.body.style.overflow = '';
        });
    }
    const notificationIcon = document.getElementById('notificationIcon');
    const notificationDropdown = document.getElementById('notificationDropdown');
    
    if (notificationIcon && notificationDropdown) {
        const newNotificationIcon = notificationIcon.cloneNode(true);
        notificationIcon.parentNode.replaceChild(newNotificationIcon, notificationIcon);
        
        newNotificationIcon.addEventListener('click', function(e) {
            e.preventDefault();
            e.stopPropagation();
            
            if (notificationDropdown.style.display === 'block') {
                notificationDropdown.style.display = 'none';
            } else {
                notificationDropdown.style.display = 'block';
            }
            
            if (window.innerWidth <= 768 && navMenu.classList.contains('active')) {
                e.stopImmediatePropagation();
            }
        });
    }
    if (notificationDropdown) {
        notificationDropdown.addEventListener('click', function(e) {
            if (window.innerWidth <= 768 && navMenu.classList.contains('active')) {
                e.stopPropagation(); 
            }
        });
    }
});
function updateTotalPrice() {
  const priceElement = document.getElementById('tourPrice');
  if (!priceElement) return;

  const basePrice = parseFloat(priceElement.textContent.replace(/[₱,]/g, '')) || 0;
  const travelers = parseInt(document.getElementById('travelers')?.value) || 1;
  const total = basePrice * travelers;

  const summaryTravelers = document.getElementById('summaryTravelers');
  const summaryTotal = document.getElementById('summaryTotal');
  const totalInput = document.getElementById('totalAmount'); // ✅ hidden field

  if (summaryTravelers) summaryTravelers.textContent = travelers;
  if (summaryTotal) summaryTotal.textContent = `₱${total.toLocaleString()}`;
  if (totalInput) totalInput.value = total; // ✅ keeps value in sync for backend
}


// Run after page loads and listen for changes
document.addEventListener('DOMContentLoaded', function() {
  const travelersInput = document.getElementById('travelers');
  if (travelersInput) {
    travelersInput.addEventListener('change', updateTotalPrice);
    travelersInput.addEventListener('input', updateTotalPrice);
  }
  updateTotalPrice();
});


function returnToHome() {
    if (isLoggedIn) {
        localStorage.setItem("isLoggedIn", "true");
        sessionStorage.setItem("isLoggedIn", "true");
        
        if (userData) {
            sessionStorage.setItem("userData", JSON.stringify(userData));
        }
        sessionStorage.setItem("bookingSuccess", "true");
    }
    window.location.href = '/?booking=success&timestamp=' + new Date().getTime();
}
function updateNavbarUI() {
    const isLoggedIn = localStorage.getItem("isLoggedIn") === "true" || 
                       sessionStorage.getItem("isLoggedIn") === "true";
    if (isLoggedIn) {
        const loginBtnWrapper = document.getElementById('loginBtnWrapper');
        const signupBtnWrapper = document.getElementById('signupBtnWrapper');
        const adminLoginBtnWrapper = document.getElementById('adminLoginBtnWrapper');
        
        if (loginBtnWrapper) loginBtnWrapper.style.display = 'none';
        if (signupBtnWrapper) signupBtnWrapper.style.display = 'none';
        if (adminLoginBtnWrapper) adminLoginBtnWrapper.style.display = 'none';
        
        const userProfile = document.getElementById('userProfile');
        if (userProfile) userProfile.style.display = 'block';
        
        let notificationWrapper = document.getElementById('notificationWrapper');
        if (!notificationWrapper) {
            notificationWrapper = document.createElement('li');
            notificationWrapper.id = 'notificationWrapper';
            notificationWrapper.innerHTML = `
               
                <ul id="notificationDropdown" class="dropdown-menu" style="display: none;">
                    <li><a href="/my-bookings">Check My Bookings</a></li>
                </ul>
            `;
            
            const navUl = document.querySelector('nav ul');
            const userProfileLi = document.getElementById('userProfile');
            if (navUl && userProfileLi) {
                navUl.insertBefore(notificationWrapper, userProfileLi);
                
                const notificationIcon = document.getElementById('notificationIcon');
                const notificationDropdown = document.getElementById('notificationDropdown');
                
                if (notificationIcon && notificationDropdown) {
                    notificationIcon.addEventListener('click', function(e) {
                        e.stopPropagation();
                        notificationDropdown.style.display = 
                            notificationDropdown.style.display === 'block' ? 'none' : 'block';
                    });
                }
            }
        } else {
            notificationWrapper.style.display = 'block';
        }
    } else {
        const loginBtnWrapper = document.getElementById('loginBtnWrapper');
        const signupBtnWrapper = document.getElementById('signupBtnWrapper');
        const adminLoginBtnWrapper = document.getElementById('adminLoginBtnWrapper');
        
        if (loginBtnWrapper) loginBtnWrapper.style.display = 'block';
        if (signupBtnWrapper) signupBtnWrapper.style.display = 'block';
        if (adminLoginBtnWrapper) adminLoginBtnWrapper.style.display = 'block';
        
        const userProfile = document.getElementById('userProfile');
        const notificationWrapper = document.getElementById('notificationWrapper');
        
        if (userProfile) userProfile.style.display = 'none';
        if (notificationWrapper) notificationWrapper.style.display = 'none';
    }
}
function updateUIForLoggedInUser() {
    const loginBtnWrapper = document.getElementById('loginBtnWrapper');
    if (loginBtnWrapper) loginBtnWrapper.style.display = 'none';
    
    const signupBtnWrapper = document.getElementById('signupBtnWrapper');
    const adminLoginBtnWrapper = document.getElementById('adminLoginBtnWrapper');
    
    if (signupBtnWrapper) signupBtnWrapper.style.display = 'none';
    if (adminLoginBtnWrapper) adminLoginBtnWrapper.style.display = 'none';
    
    const userProfile = document.getElementById('userProfile');
    if (userProfile) userProfile.style.display = 'block';
    
    let notificationWrapper = document.getElementById('notificationWrapper');
    if (!notificationWrapper) {
        notificationWrapper = document.createElement('li');
        notificationWrapper.id = 'notificationWrapper';
        notificationWrapper.innerHTML = `
            <a href="javascript:void(0);" id="notificationIcon">
                <img src="/images/bell.png" class="notification-icon">
            </a>
            <ul id="notificationDropdown" class="dropdown-menu" style="display: none;">
                <li><a href="/my-bookings">Check My Bookings</a></li>
            </ul>
        `;
        
        const navUl = document.querySelector('nav ul');
        if (navUl && userProfile) {
            navUl.insertBefore(notificationWrapper, userProfile);
            
            const notificationIcon = document.getElementById('notificationIcon');
            const notificationDropdown = document.getElementById('notificationDropdown');
            
            if (notificationIcon && notificationDropdown) {
                notificationIcon.addEventListener('click', function(e) {
                    e.stopPropagation();
                    notificationDropdown.style.display = 
                        notificationDropdown.style.display === 'block' ? 'none' : 'block';
                });
            }
        }
    } else {
        notificationWrapper.style.display = 'block';
    }
}

</script>
<script>
/* ===== Unified traveler tabs (Traveler 2..N) and collector ===== */

function escapeAttr(s) {
  if (!s) return '';
  return String(s).replace(/&/g,'&amp;').replace(/"/g,'&quot;').replace(/'/g,"&#39;").replace(/</g,'&lt;').replace(/>/g,'&gt;');
}

function createTravelerFormHTML(index) {
  // index is 1..N-1 for Traveler 2..N
  return `
    <div class="traveler-form" data-index="${index}" style="display: ${index === 1 ? 'block' : 'none'};">
      <h4>Traveler ${index + 1}</h4>

      <div class="form-group">
        <label>Full Name*</label>
        <input type="text" name="traveler_${index}_fullName" required>
      </div>

      <div class="form-group">
        <label>Nationality*</label>
        <input type="text" name="traveler_${index}_nationality" required>
      </div>

      <div class="form-group">
        <label>Birthdate</label>
        <input type="date" name="traveler_${index}_birthdate">
      </div>

      <div class="form-group">
        <label>Sex</label>
        <select name="traveler_${index}_sex">
          <option value="">Select</option>
          <option>Male</option>
          <option>Female</option>
        </select>
      </div>

      <div class="form-group">
        <label>Passport Number</label>
        <input type="text" name="traveler_${index}_passportNumber">
      </div>

      <div class="form-group">
        <label>Passport Expiry</label>
        <input type="date" name="traveler_${index}_passportExpiry">
      </div>

      <div class="form-group">
        <label>Emergency Contact Name</label>
        <input type="text" name="traveler_${index}_emergencyName">
      </div>

      <div class="form-group">
        <label>Emergency Contact Number</label>
        <input type="text" name="traveler_${index}_emergencyContact">
      </div>

      <div class="form-group">
        <label>Special Requests</label>
        <textarea name="traveler_${index}_specialRequests" rows="2" placeholder="Optional"></textarea>
      </div>
    </div>
  `;
}

function updateTravelerTabs() {
  const total = Math.min(30, Math.max(1, parseInt(document.getElementById('travelers').value || 1)));
  const tabList = document.getElementById('travelerTabList');
  const tabContent = document.getElementById('travelerTabContent');

  tabList.innerHTML = '';
  tabContent.innerHTML = '';

  // If only 1 traveler, no tabs needed — but we still generate zero extra forms
  if (total <= 1) {
    // show a message or clear
    tabList.innerHTML = '';
    tabContent.innerHTML = '<div style="padding:10px;color:#666;">Only the primary traveler is required.</div>';
    return;
  }

  // Create tabs and forms for Traveler 2 .. Traveler N (index 1..total-1)
  for (let i = 1; i < total; i++) {
    // tab
    const li = document.createElement('li');
    li.className = 'tab-item' + (i === 1 ? ' active' : '');
    li.textContent = `Traveler ${i + 1}`;
    li.onclick = () => switchTravelerTab(i);
    tabList.appendChild(li);

    // form HTML
    tabContent.insertAdjacentHTML('beforeend', createTravelerFormHTML(i));
  }

  // Ensure price & summary updated
  if (typeof updateTotalPrice === 'function') updateTotalPrice();
}

function switchTravelerTab(index) {
  // index is the i used when creating forms (1..)
  document.querySelectorAll('.tab-item').forEach((tab, idx) => {
    tab.classList.toggle('active', idx === (index - 1));
  });

  document.querySelectorAll('#travelerTabContent .traveler-form').forEach(form => {
    form.style.display = parseInt(form.dataset.index, 10) === index ? 'block' : 'none';
  });
}

// collects traveler details: first element = main traveler (from main Personal Information),
// then all other traveler forms (Traveler 2..N)
function collectTravelerDetails() {
  const total = Math.max(1, parseInt(document.getElementById('travelers').value || 1));
  const arr = [];

  // ---- Traveler 1 (main user fields) ----
  const t1FullName = document.getElementById('fullName') ? document.getElementById('fullName').value.trim() : '';
  const t1Nationality = document.getElementById('nationality') ? document.getElementById('nationality').value.trim() : '';
  const t1Birthdate = document.getElementById('birthdateMain') ? document.getElementById('birthdateMain').value || null : null;
  const t1Sex = document.getElementById('sexMain') ? document.getElementById('sexMain').value || null : null;
  const t1Passport = document.getElementById('passportNumberMain') ? document.getElementById('passportNumberMain').value.trim() || null : null;
  const t1PassportExpiry = document.getElementById('passportExpiryMain') ? document.getElementById('passportExpiryMain').value || null : null;

  arr.push({
    fullName: t1FullName || '',
    nationality: t1Nationality || '',
    birthdate: t1Birthdate ? new Date(t1Birthdate) : null,
    sex: t1Sex || null,
    passportNumber: t1Passport,
    passportExpiry: t1PassportExpiry ? new Date(t1PassportExpiry) : null,
    specialRequests: null
  });

  // ---- Traveler 2..N (from tab forms) ----
  const forms = document.querySelectorAll('#travelerTabContent .traveler-form');
  forms.forEach(form => {
    const idx = parseInt(form.dataset.index, 10); // 1..N-1
    const prefix = `traveler_${idx}_`;

    const get = name => {
      const el = form.querySelector(`[name="${name}"]`);
      return el ? el.value.trim() : '';
    };

    arr.push({
      fullName: get(`${prefix}fullName`),
      nationality: get(`${prefix}nationality`),
      birthdate: get(`${prefix}birthdate`) ? new Date(get(`${prefix}birthdate`)) : null,
      sex: get(`${prefix}sex`) || null,
      passportNumber: get(`${prefix}passportNumber`) || null,
      passportExpiry: get(`${prefix}passportExpiry`) ? new Date(get(`${prefix}passportExpiry`)) : null,
      specialRequests: get(`${prefix}specialRequests`) || null
    });
  });

  return arr;
}

/* Hook the inputs */
document.addEventListener('DOMContentLoaded', function() {
  const travelersInput = document.getElementById('travelers');
  if (travelersInput) {
    travelersInput.addEventListener('input', updateTravelerTabs);
    travelersInput.addEventListener('change', updateTravelerTabs);
  }

  // initial render
  updateTravelerTabs();
});
</script>
<script>
/* Consolidated wizard script */
document.addEventListener("DOMContentLoaded", () => {
  const steps = Array.from(document.querySelectorAll('.form-step'));
  const progress = document.getElementById('progress');
  const stepNumber = document.getElementById('stepNumber');
  const bookingForm = document.getElementById('bookingForm');
  const travelerInput = document.getElementById('travelers');
  const travelerContainer = document.getElementById('travelerDetailsContainer');
  const loadingOverlay = document.getElementById('loadingOverlay');

  let currentStep = 0;

  function showStep(index) {
    steps.forEach((s, i) => s.classList.toggle('active', i === index));
    if (progress) progress.style.width = ((index + 1) / steps.length * 100) + '%';
    if (stepNumber) stepNumber.textContent = (index + 1);
    currentStep = index;
    window.scrollTo({ top: 0, behavior: 'smooth' });
  }

  // initial
  showStep(0);

  // try to auto-fill main traveler sex and other user fields
  let storedUser = null;
  try { storedUser = sessionStorage.getItem('userData') ? JSON.parse(sessionStorage.getItem('userData')) : window.userData || null; } catch(e){ storedUser = window.userData || null; }

  if (storedUser) {
    const fullNameEl = document.getElementById('fullName');
    if (fullNameEl && !fullNameEl.value.trim()) {
      const parts = [storedUser.firstName, storedUser.middleInitial ? (storedUser.middleInitial + '.') : '', storedUser.lastName, storedUser.suffix ? (', ' + storedUser.suffix) : ''].filter(Boolean);
      fullNameEl.value = parts.join(' ').replace(/\s+/g,' ').trim();
    }
    if (storedUser.email) { const e = document.getElementById('email'); if (e && !e.value) e.value = storedUser.email; }
    if (storedUser.phoneNumber) { const p = document.getElementById('phone'); if (p && !p.value) p.value = storedUser.phoneNumber; }
    if (storedUser.nationality) { const n = document.getElementById('nationality'); if (n && !n.value) n.value = storedUser.nationality; }
    if (storedUser.sex) { const s = document.getElementById('sex'); if (s && !s.value) s.value = storedUser.sex; }
  }

  // helper: clear errors
  function clearErrors(stepEl) {
    stepEl.querySelectorAll('.error-message').forEach(e => e.remove());
    stepEl.querySelectorAll('.error-field').forEach(e => e.classList.remove('error-field'));
  }

  function markError(el, msg) {
    if (!el) return;
    el.classList.add('error-field');
    const d = document.createElement('div');
    d.className = 'error-message';
    d.textContent = msg;
    el.insertAdjacentElement('afterend', d);
  }

  // visibility helper
  function visible(el) { return el && el.offsetParent !== null; }

  // validation per step
  function validateStep(index) {
    const stepEl = steps[index];
    clearErrors(stepEl);

    if (index === 0) {
      const fullName = document.getElementById('fullName');
      const email = document.getElementById('email');
      const phone = document.getElementById('phone');
      const nationality = document.getElementById('nationality');
      const passportNumber = document.getElementById('passportNumber');
      const passportExpiry = document.getElementById('passportExpiry');

      if (!fullName.value.trim()) { markError(fullName, 'Full name is required'); return false; }
      if (!email.value.trim()) { markError(email, 'Email is required'); return false; }
      if (!phone.value.trim()) { markError(phone, 'Phone is required'); return false; }
      if (!nationality.value.trim()) { markError(nationality, 'Nationality is required'); return false; }
      if (!passportNumber.value.trim()) { markError(passportNumber, 'Passport number is required'); return false; }
      if (!passportExpiry.value) { markError(passportExpiry, 'Passport expiry is required'); return false; }

      const emailPattern = /^[^\s@]+@[^\s@]+\.[a-z]{2,}$/i;
      if (!emailPattern.test(email.value.trim())) { markError(email, 'Enter a valid email address'); return false; }
      return true;
    }

    if (index === 1) {
      const checkbox = document.getElementById('requirementsConfirm');
      if (!checkbox || !checkbox.checked) { markError(checkbox || stepEl, 'Please confirm travel requirements'); return false; }
      return true;
    }

    if (index === 2) {
      const travelersEl = document.getElementById('travelers');
      const num = parseInt(travelersEl.value) || 0;
      if (num < 1) { markError(travelersEl, 'Enter number of travelers'); return false; }

      // validate dynamic traveler fields
      for (let i = 1; i < num; i++) {
        const full = document.querySelector(`[name="traveler_${i}_fullName"]`);
        const nat = document.querySelector(`[name="traveler_${i}_nationality"]`);
        const birth = document.querySelector(`[name="traveler_${i}_birthdate"]`);
        const sex = document.querySelector(`[name="traveler_${i}_sex"]`);
        const passNo = document.querySelector(`[name="traveler_${i}_passportNumber"]`);
        const passExp = document.querySelector(`[name="traveler_${i}_passportExpiry"]`);

        if (!full || !full.value.trim()) { markError(full || travelerContainer, `Traveler ${i+1}: Full name required`); return false; }
        if (!nat || !nat.value.trim()) { markError(nat || travelerContainer, `Traveler ${i+1}: Nationality required`); return false; }
        if (!birth || !birth.value) { markError(birth || travelerContainer, `Traveler ${i+1}: Birthdate required`); return false; }
        if (!sex || !sex.value) { markError(sex || travelerContainer, `Traveler ${i+1}: Sex required`); return false; }
        if (!passNo || !passNo.value.trim()) { markError(passNo || travelerContainer, `Traveler ${i+1}: Passport number required`); return false; }
        if (!passExp || !passExp.value) { markError(passExp || travelerContainer, `Traveler ${i+1}: Passport expiry required`); return false; }
        // emergency fields are optional -> no check
      }
      return true;
    }

    if (index === 3) {
      const startDate = document.getElementById('startDate');
      if (!startDate || !startDate.value) { markError(startDate || steps[index], 'Please select a start date'); return false; }
      return true;
    }

    if (index === 4) {
      const chosen = document.querySelector('input[name="paymentMethod"]:checked');
      if (!chosen) { markError(document.querySelector('.payment-options') || steps[index], 'Please select a payment method'); return false; }
      if (chosen.value === 'gcash') {
        const r = document.getElementById('gcashReceipt');
        if (!r || !r.files || !r.files.length) { markError(r || chosen, 'Please upload your GCash receipt'); return false; }
      }
      return true;
    }

    return true;
  }
window.nextStep = function() {
  if (validateStep(currentStep)) {
    if (currentStep < steps.length - 1) {
      showStep(currentStep + 1);
      if (typeof updateTotalPrice === 'function') updateTotalPrice();
    }
  }
};

window.prevStep = function() {
  if (currentStep > 0) {
    showStep(currentStep - 1);
    if (typeof updateTotalPrice === 'function') updateTotalPrice();
  }
};


  // render traveler forms (dynamic)
  function renderTravelerForms() {
    const count = Math.max(1, parseInt(travelerInput.value) || 1);
    travelerContainer.innerHTML = '';
    for (let i = 1; i < count; i++) {
      const html = `
        <div class="traveler-box" data-i="${i}">
          <h4>Traveler ${i+1}</h4>

          <label>Full Name*</label>
          <input type="text" name="traveler_${i}_fullName" required>

          <label>Nationality*</label>
          <input type="text" name="traveler_${i}_nationality" required>

          <label>Birthdate*</label>
          <input type="date" name="traveler_${i}_birthdate" required>

          <label>Sex*</label>
          <select name="traveler_${i}_sex" required>
            <option value="">Select</option>
            <option value="Male">Male</option>
            <option value="Female">Female</option>
          </select>

          <label>Passport Number*</label>
          <input type="text" name="traveler_${i}_passportNumber" required>

          <label>Passport Expiry*</label>
          <input type="date" name="traveler_${i}_passportExpiry" required>

          <label>Emergency Contact Name (optional)</label>
          <input type="text" name="traveler_${i}_emergencyName">

          <label>Emergency Contact Number (optional)</label>
          <input type="text" name="traveler_${i}_emergencyContact">

          <label>Special Requests (optional)</label>
          <textarea name="traveler_${i}_specialRequests" rows="2"></textarea>
        </div>`;
      travelerContainer.insertAdjacentHTML('beforeend', html);
    }

    // auto-fill sex for traveler_1 if user.sex exists
    try {
      if (storedUser && storedUser.sex) {
        const sel = travelerContainer.querySelector('select[name="traveler_1_sex"]');
        if (sel && !sel.value) sel.value = storedUser.sex;
      }
    } catch (e) {}
  }

  travelerInput.addEventListener('input', renderTravelerForms);
  renderTravelerForms();

  // Payment toggles - listen to radio changes globally
  document.querySelectorAll('input[name="paymentMethod"]').forEach(radio => {
    radio.addEventListener('change', () => {
      const gcashDiv = document.getElementById('gcashDetails');
      const storeDiv = document.getElementById('storeDetails');
      if (gcashDiv) gcashDiv.style.display = (radio.value === 'gcash' && radio.checked) ? 'block' : 'none';
      if (storeDiv) storeDiv.style.display = (radio.value === 'store' && radio.checked) ? 'block' : 'none';
    });

    // also ensure clicking the payment-option container selects the radio
    const parent = radio.closest('.payment-option');
    if (parent) {
      parent.addEventListener('click', (ev) => {
        // avoid double-checking when clicking the radio itself
        if (ev.target.tagName.toLowerCase() === 'input') return;
        radio.checked = true;
        radio.dispatchEvent(new Event('change', { bubbles: true }));
      });
    }
  });

  // submit
  bookingForm.addEventListener('submit', async (e) => {
    e.preventDefault();

    // validate all steps
    for (let s = 0; s < steps.length; s++) {
      if (!validateStep(s)) { showStep(s); return; }
    }

    // show loading
    loadingOverlay.style.display = 'flex';

    const fd = new FormData(bookingForm);
    const tourId = fd.get('tourId') || '<%= tour?._id %>';
    const numTravelers = parseInt(fd.get('travelers')) || 1;
    const travelerDetails = [];

    // main traveler
    travelerDetails.push({
      fullName: fd.get('fullName') || '',
      nationality: fd.get('nationality') || '',
      birthdate: fd.get('birthdate') || null,
      sex: fd.get('sex') || null,
      passportNumber: fd.get('passportNumber') || '',
      passportExpiry: fd.get('passportExpiry') || '',
      emergencyName: fd.get('emergencyName') || '',
      emergencyContact: fd.get('emergencyContact') || '',
      specialRequests: fd.get('specialRequests') || ''
    });

    // additional travelers
    for (let i = 1; i < numTravelers; i++) {
      travelerDetails.push({
        fullName: fd.get(`traveler_${i}_fullName`) || '',
        nationality: fd.get(`traveler_${i}_nationality`) || '',
        birthdate: fd.get(`traveler_${i}_birthdate`) || null,
        sex: fd.get(`traveler_${i}_sex`) || null,
        passportNumber: fd.get(`traveler_${i}_passportNumber`) || '',
        passportExpiry: fd.get(`traveler_${i}_passportExpiry`) || '',
        emergencyName: fd.get(`traveler_${i}_emergencyName`) || '',
        emergencyContact: fd.get(`traveler_${i}_emergencyContact`) || '',
        specialRequests: fd.get(`traveler_${i}_specialRequests`) || ''
      });
    }

    // receipt - send filename string if present, else empty
    const gcashInput = document.getElementById('gcashReceipt');
    const receiptUrl = (gcashInput && gcashInput.files && gcashInput.files.length) ? gcashInput.files[0].name : '';

    const payload = {
      tourId,
      fullName: fd.get('fullName'),
      email: fd.get('email'),
      phone: fd.get('phone'),
      nationality: fd.get('nationality'),
      startDate: fd.get('startDate'),
      travelers: numTravelers,
      specialRequests: fd.get('specialRequests') || '',
      paymentMethod: fd.get('paymentMethod') || '',
      totalAmount: fd.get('totalAmount') || 0,
      receiptUrl,
      travelerDetails
    };

    try {
      const res = await fetch('/submit-booking', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(payload),
        credentials: 'include'
      });
      const data = await res.json();
      loadingOverlay.style.display = 'none';

      if (data.success) {
        const confirmation = document.getElementById('bookingConfirmation');
        if (confirmation) {
          document.getElementById('bookingReference').textContent = data.bookingReference || data.bookingId || 'N/A';
          document.getElementById('confirmationEmail').textContent = data.email || fd.get('email') || '';
          const paymentInstructions = document.getElementById('paymentInstructions');
          if (paymentInstructions) {
            if (payload.paymentMethod === 'gcash') {
              paymentInstructions.innerHTML = 'You selected <strong>GCash</strong>. Please wait while we verify your receipt. Booking is currently <strong>pending verification</strong>.';
            } else {
              paymentInstructions.innerHTML = 'You selected <strong>Pay in Store</strong>. Please visit our branch within 8 hours to complete payment.';
            }
          }

          // show overlay full screen
          confirmation.style.display = 'flex';
          confirmation.style.position = 'fixed';
          confirmation.style.inset = 0;
          confirmation.style.background = 'rgba(255,255,255,0.96)';
          confirmation.style.zIndex = 99999;
          confirmation.style.flexDirection = 'column';
          confirmation.style.justifyContent = 'center';
          confirmation.style.alignItems = 'center';

          // keep logged in
          sessionStorage.setItem('isLoggedIn','true');
          localStorage.setItem('isLoggedIn','true');

          // redirect after 6 seconds
          setTimeout(() => { window.location.href = '/'; }, 6000);
        } else {
          // fallback redirect
          setTimeout(() => { window.location.href = '/'; }, 1500);
        }
      } else {
        alert(data.message || 'Failed to submit booking. Please try again.');
      }
    } catch (err) {
      loadingOverlay.style.display = 'none';
      console.error('Booking error:', err);
      alert('An error occurred while submitting your booking. Please try again.');
    }
  });

  // helper returnToHome used by markup
  window.returnToHome = function () {
    // keep logged in
    sessionStorage.setItem('isLoggedIn','true');
    localStorage.setItem('isLoggedIn','true');
    window.location.href = '/';
  };

});
</script>
</body>
</html>
