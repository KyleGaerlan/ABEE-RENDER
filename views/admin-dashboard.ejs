<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Admin Dashboard</title>
    <link rel="stylesheet" href="/css/useradmin.css">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <style>
        .dashboard-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 20px;
            margin-bottom: 20px;
        }

        .dashboard-card {
            background: white;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            padding: 20px;
            height: 100%;
            display: flex;
            flex-direction: column;
        }

        .dashboard-card h2 {
            margin-top: 0;
            color: #333;
            font-size: 1.2rem;
            border-bottom: 1px solid #eee;
            padding-bottom: 10px;
        }

        .chart-grid {
            display: grid;
            grid-template-columns: repeat(12, 1fr);
            gap: 20px;
            margin-bottom: 20px;
        }

        .chart-container {
            background: white;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            padding: 20px;
            grid-column: span 6;
        }

        .chart-container h3 {
            margin-top: 0;
            color: #333;
            font-size: 1.1rem;
            border-bottom: 1px solid #eee;
            padding-bottom: 10px;
        }

        .chart-container.full-width {
            grid-column: span 12;
        }

        .chart-container.medium-width {
            grid-column: span 4;
        }

        .card-content {
            margin-top: 15px;
            flex-grow: 1;
            overflow-y: auto;
            max-height: 200px;
        }

        .dashboard-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 30px;
        }

        .header-actions {
            display: flex;
            align-items: center;
            gap: 15px;
        }

        #refreshData {
            padding: 8px 15px;
            background-color: #f26523;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-weight: 500;
        }

        #refreshData:hover {
            background-color: #d55a1f;
        }

        .last-updated {
            font-size: 0.9em;
            color: #666;
        }

        .error-message {
            position: fixed;
            top: 20px;
            right: 20px;
            background-color: #dc3545;
            color: white;
            padding: 15px 25px;
            border-radius: 4px;
            z-index: 1000;
            animation: slideIn 0.3s ease-out;
        }

        @keyframes slideIn {
            from {
                transform: translateX(100%);
                opacity: 0;
            }
            to {
                transform: translateX(0);
                opacity: 1;
            }
        }
        .destinations-list {
            list-style-type: none;
            padding: 0;
            margin: 0;
        }
        
        .destinations-list li {
            display: flex;
            justify-content: space-between;
            padding: 8px 0;
            border-bottom: 1px solid #eee;
        }
        
        .destinations-list li:last-child {
            border-bottom: none;
        }
        
        .destination-name {
            font-weight: 500;
        }
        
        .destination-count {
            color: #f26523;
            font-weight: 600;
        }

        .analytics-section {
            margin-bottom: 30px;
        }

        .analytics-section h2 {
            font-size: 1.4rem;
            margin-bottom: 15px;
            color: #333;
            border-bottom: 2px solid #f26523;
            padding-bottom: 8px;
            display: inline-block;
        }

        .stats-summary {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 15px;
            margin-bottom: 20px;
        }

        .stat-card {
    background: white;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    padding: 15px;
    text-align: center;
    border-left: 4px solid #f26523;
    display: flex;
    flex-direction: column;
}

.stat-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 10px;
}

.stat-header h3 {
    margin: 0;
    font-size: 0.9rem;
    color: #666;
    text-align: left;
}

.period-selector {
    padding: 4px 8px;
    border-radius: 4px;
    border: 1px solid #ddd;
    font-size: 0.8rem;
}


        .stat-value {
            font-size: 1.8rem;
            font-weight: bold;
            margin: 10px 0;
            color: #333;
        }

        .stat-trend {
            font-size: 0.8rem;
            color: #28a745;
        }

        .stat-trend.negative {
            color: #dc3545;
        }

        .chart-tabs {
            display: flex;
            border-bottom: 1px solid #ddd;
            margin-bottom: 20px;
        }

        .chart-tab {
            padding: 10px 20px;
            cursor: pointer;
            border: 1px solid transparent;
            border-bottom: none;
            margin-right: 5px;
            border-radius: 4px 4px 0 0;
            background-color: #f8f9fa;
        }

        .chart-tab.active {
            background-color: white;
            border-color: #ddd;
            border-bottom-color: white;
            margin-bottom: -1px;
            font-weight: 500;
        }

        .chart-tab-content {
            display: none;
        }

        .chart-tab-content.active {
            display: block;
        }
        /* Improved menu toggle button */
.menu-toggle {
    display: none;
    position: fixed;
    top: 15px;
    left: 15px;
    z-index: 1000;
    background-color: #f26523;
    color: white;
    border: none;
    border-radius: 4px;
    width: 40px;
    height: 40px;
    cursor: pointer;
    padding: 0;
}

.menu-toggle-inner {
    position: relative;
    width: 100%;
    height: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
}

.menu-toggle span {
    display: block;
    position: absolute;
    width: 22px;
    height: 2px;
    background-color: white;
    transition: all 0.3s ease;
    left: 9px; /* Centered within the 40px button */
}

.menu-toggle span:nth-child(1) {
    top: 14px;
}

.menu-toggle span:nth-child(2) {
    top: 19px;
}

.menu-toggle span:nth-child(3) {
    top: 24px;
}

.menu-toggle.active span:nth-child(1) {
    transform: rotate(45deg);
    top: 19px;
}

.menu-toggle.active span:nth-child(2) {
    opacity: 0;
}

.menu-toggle.active span:nth-child(3) {
    transform: rotate(-45deg);
    top: 19px;
}

.sidebar-overlay {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.5);
    z-index: 998;
}

@media (max-width: 768px) {
    .menu-toggle {
        display: block;
    }

    .sidebar {
        position: fixed;
        left: -250px;
        top: 0;
        height: 100%;
        width: 250px;
        z-index: 999;
        transition: left 0.3s ease;
        overflow-y: auto;
    }

    .sidebar.active {
        left: 0;
    }

    .main-content {
        margin-left: 0;
        width: 100%;
        padding: 20px;
        padding-top: 60px;
    }

    .sidebar-overlay.active {
        display: block;
    }
}
.detailed-list li {
    margin-bottom: 10px;
    padding-bottom: 10px;
    border-bottom: 1px solid #eee;
}

.detailed-list li:last-child {
    border-bottom: none;
}

.list-date {
    font-weight: bold;
    color: #333;
}

.list-time {
    color: #666;
    font-size: 0.9em;
    margin-left: 5px;
}

.list-count {
    color: #f26523;
    font-weight: bold;
}
.export-buttons {
    display: flex;
    gap: 10px;
    margin-right: 15px;
}

.action-button {
    padding: 8px 15px;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    font-weight: 500;
    display: flex;
    align-items: center;
    gap: 5px;
}

.export-button {
    background-color: #28a745;
    color: white;
}

.export-button:hover {
    background-color: #218838;
}

.print-button {
    background-color: #17a2b8;
    color: white;
}

.print-button:hover {
    background-color: #138496;
}

@media print {
    .sidebar, .menu-toggle, .sidebar-overlay, .header-actions, .no-print {
        display: none !important;
    }
    
    .main-content {
        margin-left: 0 !important;
        padding: 0 !important;
        width: 100% !important;
    }
    
    body {
        background-color: white !important;
    }
    
    .dashboard-grid, .chart-grid {
        page-break-inside: avoid;
    }
    
    .dashboard-card, .chart-container {
        break-inside: avoid;
        box-shadow: none !important;
        border: 1px solid #ddd !important;
    }
    
    .print-header {
        display: block !important;
        text-align: center;
        margin-bottom: 20px;
    }
    
    .print-footer {
        display: block !important;
        text-align: center;
        margin-top: 20px;
        font-size: 12px;
        color: #666;
    }
}

.print-header, .print-footer {
    display: none;
}
.notification.success {
    background-color: #28a745;
    color: white;
    padding: 15px 25px;
    border-radius: 4px;
    z-index: 1000;
    animation: slideIn 0.3s ease-out;
}

.notification.error {
    background-color: #dc3545;
    color: white;
    padding: 15px 25px;
    border-radius: 4px;
    z-index: 1000;
    animation: slideIn 0.3s ease-out;
}
.chart-container.full-width {
    grid-column: span 12;
    height: 400px; /* Increase the height */
}

.chart-container {
    grid-column: span 12; /* Make all charts full width */
    height: 400px; /* Increase the height */
}.analytics-controls {
    margin-bottom: 20px;
}

.analytics-selector {
    padding: 8px 15px;
    border: 1px solid #ddd;
    border-radius: 4px;
    font-size: 1rem;
    background-color: white;
    cursor: pointer;
}

.analytics-selector:focus {
    outline: none;
    border-color: #f26523;
}

.analytics-content {
    transition: opacity 0.3s ease;
}
/* Update these CSS rules in your existing styles */

.chart-grid {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    gap: 20px;
    margin-bottom: 20px;
    width: 100%;
}

.chart-container {
    background: white;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    padding: 20px;
    position: relative;
    width: 80%;
    height: 600px; /* Fixed height for all charts */
}

.chart-container.full-width {
    grid-column: 1 / -1; /* Span all columns */
}

.chart-container canvas {
    width: 100% !important;
    height: 100% !important;
}

.analytics-content {
    margin-top: 20px;
    width: 100%;
}

/* Add responsive breakpoints */
@media (max-width: 1200px) {
    .chart-grid {
        grid-template-columns: 1fr; /* Single column on smaller screens */
    }
    
    .chart-container {
        height: 350px; /* Slightly smaller height on mobile */
    }
}


    </style>
</head>
<body>
    <button class="menu-toggle" id="menuToggle">
        <div class="menu-toggle-inner">
            <span></span>
            <span></span>
            <span></span>
        </div>
    </button>
    
    <div class="sidebar-overlay" id="sidebarOverlay"></div>
    
    <div class="sidebar" id="sidebar">
        <div class="logo">
            <img src="/images/Image-logo.png" alt="Company Logo">
        </div>
        <div class="admin-info" style="display: none;">
            <p>Welcome, <span id="adminName"><%= admin.firstName %> <%= admin.lastName %></span></p>
            <p class="admin-role" id="adminRole">Role: <%= admin.role %></p>
        </div>
        <nav class="sidebar-nav">
           <a href="/admin-dashboard">Dashboard</a>
            <% if (admin.role !== 'employee') { %>
                <a href="/admin-users">Users</a>
                <a href="/admin-approvals">Account Approvals</a>
            <% } %>
            <a href="/employee-dashboard">Employee Performance</a>
            
            <a href="/admin-bookings">Bookings</a>
            <a href="/admin-tours">Tours</a>
            <a href="/admin-messages">Messages</a>
            <a href="#" onclick="handleAdminLogout()">Logout</a>
        </nav>   
    </div>
    

    <div class="main-content">
        <header class="dashboard-header">
            <h1>Admin Dashboard</h1>
            <div class="header-actions">
                <div class="export-buttons">
                    <button id="printDashboard" class="action-button print-button">
                        <i class="fas fa-print"></i> Print Dashboard
                    </button>
                    <button id="exportCSV" class="action-button export-button">
                        <i class="fas fa-file-csv"></i> Export to CSV
                    </button>
                    <button id="exportExcel" class="action-button export-button">
                        <i class="fas fa-file-excel"></i> Export to Excel
                    </button>
                </div>
                <button id="refreshData" onclick="fetchDashboardData()">
                    <i class="fas fa-sync-alt"></i> Refresh Data
                </button>
                <div class="last-updated">Last updated: <span id="lastUpdated">Never</span></div>
            </div>
        </header>
        
        <div class="stats-summary">
            <div class="stat-card">
                <div class="stat-header">
                    <h3>Total Registered Users</h3>
                    <select id="usersPeriod" class="period-selector">
                        <option value="all">All Time</option>
                        <option value="year">This Year</option>
                        <option value="month">This Month</option>
                        <option value="day">Today</option>
                    </select>
                </div>
                <div class="stat-value" id="totalUsers">--</div>
            </div>
            <div class="stat-card">
                 <div class="stat-header">
                    <h3>Total Bookings</h3>
                    <select id="bookingsPeriod" class="period-selector">
                        <option value="all">All Time</option>
                        <option value="year">This Year</option>
                        <option value="month">This Month</option>
                        <option value="day">Today</option>
                    </select>
                </div>
                <div class="stat-value" id="totalBookings">--</div>
            </div>
            <div class="stat-card">
                <div class="stat-header">
                    <h3>Total Sales</h3>
                    <select id="salesPeriod" class="period-selector">
                        <option value="all">All Time</option>
                        <option value="year">This Year</option>
                        <option value="month">This Month</option>
                        <option value="day">Today</option>
                    </select>
                </div>
                <div class="stat-value" id="totalRevenue">₱--</div>
            </div>
        </div>

        <div class="analytics-section">

            <h2>Recent Activity</h2>
            <div class="dashboard-grid">
                <div class="dashboard-card">
                    <h2>Users This Week</h2>
                    <div class="card-content">
                        <ul id="user-list" class="detailed-list"><p>Loading...</p></ul>
                    </div>
                </div>                

                 <div class="dashboard-card">
                    <h2>Bookings This Week</h2>
                    <div class="card-content">
                        <ul id="booking-list" class="detailed-list"><p>Loading...</p></ul>
                    </div>
                </div>                
                
                <div class="dashboard-card">
                    <div class="stat-header">
                        <h2>Top Destinations</h2>
                        <select id="destinationsPeriod" class="period-selector">
                            <option value="all">All Time</option>
                            <option value="year">This Year</option>
                            <option value="month">This Month</option>
                            <option value="day">Today</option>
                        </select>
                    </div>
                    <div class="card-content">
                        <ul id="destinations-list" class="destinations-list"><p>Loading...</p></ul>
                    </div>
                </div>
            </div>
        </div>

        <div class="analytics-section">
            <h2>Time-Based Analytics</h2>
            <div class="chart-tabs">
                <div class="chart-tab active" data-period="daily">Daily</div>
                <div class="chart-tab" data-period="monthly">Monthly</div>
                <div class="chart-tab" data-period="yearly">Yearly</div>
            </div>
            
            <div class="date-range-selector">
                <div class="daily-selector chart-tab-content active">
                    <label for="daily-date-range">Date Range:</label>
                    <input type="date" id="daily-start-date">
                    <span>to</span>
                    <input type="date" id="daily-end-date">
                    <button id="daily-apply-range" class="action-button" style="background-color: #d55a1f; color:white">Apply</button>
                </div>
                
                <div class="monthly-selector chart-tab-content">
                    <label for="monthly-year">Select Year:</label>
                    <select id="monthly-year"></select>
                    <button id="monthly-apply" class="action-button" style="background-color: #d55a1f; color:white">Apply</button>
                </div>
                <div class="yearly-selector chart-tab-content">
                    <label for="yearly-future-years">Future Years to Show:</label>
                    <select id="yearly-future-years">
                        <option value="0">None</option>
                        <option value="1">1 Year</option>
                        <option value="2">2 Years</option>
                        <option value="3">3 Years</option>
                        <option value="5" selected>5 Years</option>
                        <option value="10">10 Years</option>
                    </select>
                    <button id="yearly-apply" class="action-button"style="background-color: #d55a1f; color:white">Apply</button>
                </div>
                
            </div>
            
            <div class="chart-grid">
                <div class="chart-container full-width">
                    <h3>User Registrations</h3>
                    <canvas id="timeBasedUsersChart"></canvas>
                </div>
                
                <div class="chart-container full-width">
                    <h3>Bookings</h3>
                    <canvas id="timeBasedBookingsChart"></canvas>
                </div>
                
                <div class="chart-container full-width">
                    <h3>Sales</h3>
                    <canvas id="timeBasedRevenueChart"></canvas>
                </div>
            </div>
        </div>
        <div class="analytics-section">
            <h2>Seasonal Analytics</h2>
            <div class="analytics-controls">
                <label for="seasonal-year">Select Year:</label>
                <select id="seasonal-year">
                    <!-- Options will be populated dynamically -->
                </select>
                <button id="seasonal-apply" class="action-button" style="background-color: #d55a1f; color:white">Apply</button>
            </div>
            <div class="chart-grid">
                <div class="chart-container full-width" style="width: 100%; height: 90%;">
                    <h3>Seasonal Booking Trends by Destination</h3>
                    <canvas id="seasonalTrendsChart"></canvas>
                </div>
                <div class="chart-container full-width" style="width: 100%; height: 90%;">
                    <h3 id="predictedBookingsTitle">Predicted Bookings for Next Year</h3>
                    <canvas id="predictedBookingsChart"></canvas>
                </div>
                
            </div>
        </div>
        
        
        

        <div class="print-header">
            <h1>A.BEE Travel and Tours - Admin Dashboard Report</h1>
            <p>Generated on: <span id="printDate"></span></p>
        </div>
        
        <!-- At the end of main-content, before closing div -->
        <div class="print-footer">
            <p>© A.BEE Travel and Tours - Confidential Admin Report</p>
        </div>
        
    </div>

    <script>
        let userChart = null;
        let bookingChart = null;
        let destinationChart = null;
        let revenueChart = null;
        let userTrendsChart = null;
        let paymentMethodsChart = null;

        document.addEventListener('DOMContentLoaded', function() {
            const adminName = localStorage.getItem('adminName') || 'Admin';
            const adminRole = localStorage.getItem('adminRole') || 'admin';
            
            document.getElementById('adminName').textContent = adminName;
            document.getElementById('adminRole').textContent = `Role: ${adminRole}`;
            fetchDashboardData();
            fetchSummaryData();

             document.getElementById('usersPeriod').addEventListener('change', () => fetchSummaryData());
            document.getElementById('bookingsPeriod').addEventListener('change', () => fetchSummaryData());
            document.getElementById('salesPeriod').addEventListener('change', () => fetchSummaryData());
            document.getElementById('destinationsPeriod').addEventListener('change', () => fetchSummaryData());
        });

        async function fetchSummaryData() {
            try {
                const usersPeriod = document.getElementById('usersPeriod').value;
                const bookingsPeriod = document.getElementById('bookingsPeriod').value;
                const salesPeriod = document.getElementById('salesPeriod').value;
                const destinationsPeriod = document.getElementById('destinationsPeriod').value;

                // Fetch data for each card based on its own selector
                const usersResponse = await fetch(`/api/analytics/summary?period=${usersPeriod}`);
                const usersData = await usersResponse.json();
                if(usersData.success) document.getElementById('totalUsers').textContent = usersData.data.totalUsers.toLocaleString();

                const bookingsResponse = await fetch(`/api/analytics/summary?period=${bookingsPeriod}`);
                const bookingsData = await bookingsResponse.json();
                if(bookingsData.success) document.getElementById('totalBookings').textContent = bookingsData.data.totalBookings.toLocaleString();

                const salesResponse = await fetch(`/api/analytics/summary?period=${salesPeriod}`);
                const salesData = await salesResponse.json();
                if(salesData.success) document.getElementById('totalRevenue').textContent = '₱' + salesData.data.totalSales.toLocaleString();

                const destinationsResponse = await fetch(`/api/analytics/summary?period=${destinationsPeriod}`);
                const destinationsData = await destinationsResponse.json();
                if(destinationsData.success) {
                    const destinationsList = document.getElementById('destinations-list');
                    if (destinationsData.data.topDestinations && destinationsData.data.topDestinations.length > 0) {
                        destinationsList.innerHTML = destinationsData.data.topDestinations.map(item => 
                            `<li>
                                <span class="destination-name">${item._id || 'Unknown'}</span>
                                <span class="destination-count">${item.count} bookings</span>
                            </li>`
                        ).join('');
                    } else {
                        destinationsList.innerHTML = '<p>No destination data available for this period.</p>';
                    }
                }

            } catch (error) {
                console.error("Error fetching summary data:", error);
                showNotification("Failed to load summary data.", 'error');
            }
        }

        async function fetchDashboardData() {
    try {
        console.log("🔄 Fetching dashboard data...");
        const dashboardResponse = await fetch('/admin-dashboard/data', {
            credentials: 'include'
        });

        if (dashboardResponse.status === 401) {
            handleAdminLogout();
            return;
        }

        if (!dashboardResponse.ok) {
            throw new Error(`HTTP error! Status: ${dashboardResponse.status}`);
        }

        const dashboardData = await dashboardResponse.json();
        
        // Fetch destinations data
        const destinationsResponse = await fetch('/api/analytics/popular-destinations', {
            credentials: 'include'
        });
        
        if (!destinationsResponse.ok) {
            throw new Error(`HTTP error! Status: ${destinationsResponse.status}`);
        }
        
        const destinationsData = await destinationsResponse.json();
        
        // Combine all data
        const combinedData = {
            ...dashboardData,
            popularDestinations: destinationsData.popularDestinations
        };
        
        console.log("📌 Fetched Data:", combinedData);
        
        // Update summary stats
        updateSummaryStats(combinedData);
        
        // Update UI components
        updateDashboardUI(combinedData);
        updateLastUpdated();
        
    } catch (error) {
        console.error("❌ Error fetching dashboard data:", error);
        showNotification("Failed to load dashboard data. Please try again.", 'error');
    }
}

        function updateRecentUsers(users) {
    const usersList = document.getElementById('recent-users-list');
    if (users && users.length > 0) {
        usersList.innerHTML = users.map(user => {
            const date = new Date(user.createdAt);
            const formattedDate = date.toLocaleDateString();
            const formattedTime = date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
            return `<li>
                <div><strong>${user.username || user.email}</strong></div>
                <div>Registered on <span class="list-date">${formattedDate}</span> at <span class="list-time">${formattedTime}</span></div>
            </li>`;
        }).join('');
    } else {
        usersList.innerHTML = '<p>No recent user registrations</p>';
    }
}

function updateRecentBookings(bookings) {
    const bookingsList = document.getElementById('recent-bookings-list');
    if (bookings && bookings.length > 0) {
        bookingsList.innerHTML = bookings.map(booking => {
            const date = new Date(booking.createdAt);
            const formattedDate = date.toLocaleDateString();
            const formattedTime = date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
            return `<li>
                <div><strong>${booking.fullName || 'Unknown'}</strong> - ${booking.destination || booking.tourDetails?.destination || 'Unknown destination'}</div>
                <div>Booked on <span class="list-date">${formattedDate}</span> at <span class="list-time">${formattedTime}</span></div>
            </li>`;
        }).join('');
    } else {
        bookingsList.innerHTML = '<p>No recent bookings</p>';
    }
}
        function updateSummaryStats(data) {
    // Calculate total users
    const totalUsers = data.usersThisWeek.reduce((sum, item) => sum + item.count, 0);
    document.getElementById('totalUsers').textContent = totalUsers;
    
    // Calculate total bookings
    const totalBookings = data.bookingsThisWeek.reduce((sum, item) => sum + item.count, 0);
    document.getElementById('totalBookings').textContent = totalBookings;
    
    // Calculate total revenue
    const totalRevenue = data.popularDestinations ? 
        data.popularDestinations.reduce((sum, item) => sum + (item.revenue || 0), 0) : 0;
    document.getElementById('totalRevenue').textContent = '₱' + totalRevenue.toLocaleString();
    
}
function updateDashboardUI(data) {
    // Update user list
    const userList = document.getElementById('user-list');
    if (data.usersThisWeek && data.usersThisWeek.length > 0) {
        userList.innerHTML = data.usersThisWeek.map(item => {
            const date = new Date(item.date);
            const formattedDate = date.toLocaleDateString();
            const formattedTime = date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
            return `<li>
                <span class="list-date">${formattedDate}</span>
                <span class="list-time">${formattedTime}</span>: 
                <span class="list-count">${item.count}</span> new users
            </li>`;
        }).join('');
    } else {
        userList.innerHTML = '<p>No user data available for this week</p>';
    }

    // Update booking list
    const bookingList = document.getElementById('booking-list');
    if (data.bookingsThisWeek && data.bookingsThisWeek.length > 0) {
        bookingList.innerHTML = data.bookingsThisWeek.map(item => {
            const date = new Date(item.date);
            const formattedDate = date.toLocaleDateString();
            const formattedTime = date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
            return `<li>
                <span class="list-date">${formattedDate}</span>
                <span class="list-time">${formattedTime}</span>: 
                <span class="list-count">${item.count}</span> new bookings
            </li>`;
        }).join('');
    } else {
        bookingList.innerHTML = '<p>No booking data available for this week</p>';
    }
    
    // Update destinations list (unchanged)
    const destinationsList = document.getElementById('destinations-list');
    if (data.popularDestinations && data.popularDestinations.length > 0) {
        destinationsList.innerHTML = data.popularDestinations.slice(0, 5).map(item => 
            `<li>
                <span class="destination-name">${item._id || 'Unknown'}</span>
                <span class="destination-count">${item.count} bookings</span>
            </li>`
        ).join('');
    } else {
        destinationsList.innerHTML = '<p>No destination data available</p>';
    }
}


        function updateCharts(data) {
            const userCtx = document.getElementById('usersChart').getContext('2d');
            const bookingCtx = document.getElementById('bookingsChart').getContext('2d');
            const userTrendsCtx = document.getElementById('userTrendsChart').getContext('2d');
            
            // Prepare data for charts
            const labels = data.usersThisWeek.map(item => 
                new Date(item.date).toLocaleDateString('en-US', { weekday: 'short' })
            );
            
            const userData = data.usersThisWeek.map(item => item.count);
            const bookingData = data.bookingsThisWeek.map(item => item.count);
            
            // Create cumulative user data for trends
            const cumulativeUserData = userData.reduce((acc, val, i) => {
                if (i === 0) return [val];
                return [...acc, acc[i-1] + val];
            }, []);
            
            // Destroy existing charts if they exist
            if (userChart) userChart.destroy();
            if (bookingChart) bookingChart.destroy();
            if (userTrendsChart) userTrendsChart.destroy();
            
            // Create new charts
            userChart = new Chart(userCtx, {
                type: 'bar',
                data: {
                    labels: labels,
                    datasets: [{
                        label: 'New Users',
                        data: userData,
                        backgroundColor: 'rgba(54, 162, 235, 0.6)',
                        borderColor: 'rgba(54, 162, 235, 1)',
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    scales: {
                        y: {
                            beginAtZero: true,
                            ticks: {
                                precision: 0
                            }
                        }
                    }
                }
            });
            
            bookingChart = new Chart(bookingCtx, {
                type: 'bar',
                data: {
                    labels: labels,
                    datasets: [{
                        label: 'New Bookings',
                        data: bookingData,
                        backgroundColor: 'rgba(255, 99, 132, 0.6)',
                        borderColor: 'rgba(255, 99, 132, 1)',
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    scales: {
                        y: {
                            beginAtZero: true,
                            ticks: {
                                precision: 0
                            }
                        }
                    }
                }
            });
            
            // Create user trends chart (cumulative growth)
            userTrendsChart = new Chart(userTrendsCtx, {
                type: 'line',
                data: {
                    labels: labels,
                    datasets: [{
                        label: 'Cumulative User Growth',
                        data: cumulativeUserData,
                        backgroundColor: 'rgba(75, 192, 192, 0.2)',
                        borderColor: 'rgba(75, 192, 192, 1)',
                        borderWidth: 2,
                        tension: 0.4,
                        fill: true
                    }]
                },
                options: {
                    responsive: true,
                    scales: {
                        y: {
                            beginAtZero: true,
                            ticks: {
                                precision: 0
                            }
                        }
                    }
                }
            });
        }

        function updateSeasonalTrendsChart(seasonalTrends) {
            if (!seasonalTrends || seasonalTrends.length === 0) {
                console.log("No seasonal trends data available");
                return;
            }

            const ctx = document.getElementById('seasonalTrendsChart').getContext('2d');
            
            // Process data for chart
            // Group by season and sum counts
            const seasonData = {};
            seasonalTrends.forEach(item => {
                const season = item._id.season;
                const destination = item._id.destination || 'Unknown';
                
                if (!seasonData[season]) {
                    seasonData[season] = {};
                }
                
                if (!seasonData[season][destination]) {
                    seasonData[season][destination] = 0;
                }
                
                seasonData[season][destination] += item.count;
            });
            
            // Get unique destinations and seasons
            const destinations = [...new Set(seasonalTrends.map(item => item._id.destination || 'Unknown'))];
            const seasons = ['Winter', 'Spring', 'Summer', 'Fall']; // Fixed order
            
            // Prepare datasets
            const datasets = destinations.map((destination, index) => {
                const color = `hsl(${index * 360 / destinations.length}, 70%, 60%)`;
                
                return {
                    label: destination,
                    data: seasons.map(season => {
                        return seasonData[season] && seasonData[season][destination] ? seasonData[season][destination] : 0;
                    }),
                    backgroundColor: `hsla(${index * 360 / destinations.length}, 70%, 60%, 0.6)`,
                    borderColor: `hsl(${index * 360 / destinations.length}, 70%, 60%)`,
                    borderWidth: 1
                };
            });
            
            // Destroy existing chart if it exists
            if (seasonalTrendsChart) seasonalTrendsChart.destroy();
            
            // Create new chart
            seasonalTrendsChart = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: seasons,
                    datasets: datasets
                },
                options: {
                    responsive: true,
                    scales: {
                        y: {
                            beginAtZero: true,
                            ticks: {
                                precision: 0
                            }
                        }
                    },
                    plugins: {
                        title: {
                            display: true,
                            text: 'Seasonal Booking Trends by Destination',
                            font: {
                                size: 16
                            }
                        }
                    }
                }
            });
        }

        function updatePaymentMethodsChart(paymentData) {
            if (!paymentData || paymentData.length === 0) {
                console.log("No payment methods data available");
                return;
            }

            const ctx = document.getElementById('paymentMethodsChart').getContext('2d');
            
            // Process data for chart
            // Group by payment method and destination
            const paymentMethodsData = {};
            const destinations = new Set();
            const paymentMethods = new Set();
            
            paymentData.forEach(item => {
                const destination = item._id.destination || 'Unknown';
                const paymentMethod = item._id.paymentMethod || 'Unknown';
                
                destinations.add(destination);
                paymentMethods.add(paymentMethod);
                
                if (!paymentMethodsData[paymentMethod]) {
                    paymentMethodsData[paymentMethod] = {};
                }
                
                paymentMethodsData[paymentMethod][destination] = item.count;
            });
            
            // Convert sets to arrays
            const destinationsArray = [...destinations];
            const paymentMethodsArray = [...paymentMethods];
            
            // Prepare datasets
            const datasets = paymentMethodsArray.map((method, index) => {
                const color = `hsl(${index * 360 / paymentMethodsArray.length}, 70%, 60%)`;
                
                return {
                    label: method.charAt(0).toUpperCase() + method.slice(1),
                    data: destinationsArray.map(destination => {
                        return paymentMethodsData[method] && paymentMethodsData[method][destination] ? 
                            paymentMethodsData[method][destination] : 0;
                    }),
                    backgroundColor: `hsla(${index * 360 / paymentMethodsArray.length}, 70%, 60%, 0.6)`,
                    borderColor: `hsl(${index * 360 / paymentMethodsArray.length}, 70%, 60%)`,
                    borderWidth: 1
                };
            });
            
            // Destroy existing chart if it exists
            if (paymentMethodsChart) paymentMethodsChart.destroy();
            
            // Create new chart
            paymentMethodsChart = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: destinationsArray,
                    datasets: datasets
                },
                options: {
                    responsive: true,
                    scales: {
                        y: {
                            beginAtZero: true,
                            ticks: {
                                precision: 0
                            }
                        }
                    },
                    plugins: {
                        title: {
                            display: true,
                            text: 'Payment Methods by Destination',
                            font: {
                                size: 16
                            }
                        }
                    }
                }
            });
        }

        function updateDestinationsChart(destinations) {
            if (!destinations || destinations.length === 0) {
                console.log("No destinations data available");
                return;
            }

            const ctx = document.getElementById('destinationsChart').getContext('2d');
            
            // Sort destinations by count in descending order
            const sortedDestinations = [...destinations].sort((a, b) => b.count - a.count);
            
            // Take top 10 destinations
            const topDestinations = sortedDestinations.slice(0, 10);
            
            // Prepare data for chart
            const labels = topDestinations.map(item => item._id || 'Unknown');
            const data = topDestinations.map(item => item.count);
            
            // Generate colors
            const backgroundColors = topDestinations.map((_, index) => 
                `hsla(${index * 360 / topDestinations.length}, 70%, 60%, 0.6)`);
            const borderColors = topDestinations.map((_, index) => 
                `hsl(${index * 360 / topDestinations.length}, 70%, 60%)`);
            
            // Destroy existing chart if it exists
            if (destinationChart) destinationChart.destroy();
            
            // Create new chart
            destinationChart = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: labels,
                    datasets: [{
                        label: 'Number of Bookings',
                        data: data,
                        backgroundColor: backgroundColors,
                        borderColor: borderColors,
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    scales: {
                        y: {
                            beginAtZero: true,
                            ticks: {
                                precision: 0
                            }
                        }
                    },
                    plugins: {
                        title: {
                            display: true,
                            text: 'Most Popular Destinations',
                            font: {
                                size: 16
                            }
                        }
                    }
                }
            });
        }

        function updateRevenueChart(destinations) {
            if (!destinations || destinations.length === 0) {
                console.log("No destinations data available for Sales chart");
                return;
            }

            const ctx = document.getElementById('revenueChart').getContext('2d');
            
            // Sort destinations by revenue in descending order
            const sortedDestinations = [...destinations].sort((a, b) => (b.revenue || 0) - (a.revenue || 0));
            
            // Take top 10 destinations
            const topDestinations = sortedDestinations.slice(0, 10);
            
            // Prepare data for chart
            const labels = topDestinations.map(item => item._id || 'Unknown');
            const data = topDestinations.map(item => item.revenue || 0);
            
            // Generate colors
            const backgroundColors = topDestinations.map((_, index) => 
                `hsla(${index * 360 / topDestinations.length}, 70%, 60%, 0.6)`);
            const borderColors = topDestinations.map((_, index) => 
                `hsl(${index * 360 / topDestinations.length}, 70%, 60%)`);
            
            // Destroy existing chart if it exists
            if (revenueChart) revenueChart.destroy();
            
            // Create new chart
            revenueChart = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: labels,
                    datasets: [{
                        label: 'Sales (₱)',
                        data: data,
                        backgroundColor: backgroundColors,
                        borderColor: borderColors,
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    scales: {
                        y: {
                            beginAtZero: true,
                            ticks: {
                                callback: function(value) {
                                    return '₱' + value.toLocaleString();
                                }
                            }
                        }
                    },
                    plugins: {
                        title: {
                            display: true,
                            text: 'Sales by Destination',
                            font: {
                                size: 16
                            }
                        },
                        tooltip: {
                            callbacks: {
                                label: function(context) {
                                    return '₱' + context.raw.toLocaleString();
                                }
                            }
                        }
                    }
                }
            });
        }

        function updateLastUpdated() {
            const now = new Date();
            document.getElementById('lastUpdated').textContent = now.toLocaleString();
        }

        function showNotification(message, type) {
            // Remove any existing notifications
            const existingNotifications = document.querySelectorAll('.notification');
            existingNotifications.forEach(notification => {
                notification.remove();
            });
            
            // Create new notification
            const notification = document.createElement('div');
            notification.className = `notification ${type}`;
            notification.textContent = message;
            
            document.body.appendChild(notification);
            
            // Remove notification after 3 seconds
            setTimeout(() => {
                notification.remove();
            }, 3000);
        }

        function handleAdminLogout() {
            fetch('/api/admin/logout', {
                method: 'GET',
                credentials: 'include'
            })
            .then(() => {
                localStorage.removeItem('isAdminLoggedIn');
                localStorage.removeItem('adminToken');
                localStorage.removeItem('adminRole');
                localStorage.removeItem('adminName');
                window.location.href = '/';
            })
            .catch(error => {
                console.error('Logout error:', error);
                showNotification('Logout failed. Please try again.', 'error');
            });
        }
        // Mobile menu toggle functionality
const menuToggle = document.getElementById('menuToggle');
const sidebar = document.getElementById('sidebar');
const sidebarOverlay = document.getElementById('sidebarOverlay');

menuToggle.addEventListener('click', function() {
    this.classList.toggle('active');
    sidebar.classList.toggle('active');
    sidebarOverlay.classList.toggle('active');
    
    // Prevent scrolling when sidebar is open
    document.body.style.overflow = sidebar.classList.contains('active') ? 'hidden' : '';
});

sidebarOverlay.addEventListener('click', function() {
    menuToggle.classList.remove('active');
    sidebar.classList.remove('active');
    this.classList.remove('active');
    document.body.style.overflow = '';
});

// Close sidebar when clicking on a link (for mobile)
const sidebarLinks = document.querySelectorAll('.sidebar-nav a');
sidebarLinks.forEach(link => {
    link.addEventListener('click', function() {
        if (window.innerWidth <= 768) {
            menuToggle.classList.remove('active');
            sidebar.classList.remove('active');
            sidebarOverlay.classList.remove('active');
            document.body.style.overflow = '';
        }
    });
});
// CSV Export Function
function exportToCSV() {
    try {
        // Prepare data arrays
        const csvData = [];
        
        // Add header row
        csvData.push(['A.BEE Travel and Tours - Admin Dashboard Report']);
        csvData.push(['Generated on:', new Date().toLocaleString()]);
        csvData.push([]);
        
        // Summary Statistics
        csvData.push(['Summary Statistics']);
        csvData.push(['Total Users', document.getElementById('totalUsers').textContent]);
        csvData.push(['Total Bookings', document.getElementById('totalBookings').textContent]);
        csvData.push(['Total Sales', document.getElementById('totalRevenue').textContent]);
        csvData.push([]);
        
        // Recent User Registrations
        csvData.push(['Recent User Registrations']);
        const recentUsers = document.getElementById('recent-users-list');
        if (recentUsers) {
            const userItems = recentUsers.querySelectorAll('li');
            userItems.forEach(item => {
                const username = item.querySelector('strong')?.textContent || 'Unknown';
                const registrationInfo = item.querySelector('div:nth-child(2)')?.textContent || '';
                csvData.push([username, registrationInfo.trim()]);
            });
        }
        csvData.push([]);
        
        // Recent Bookings
        csvData.push(['Recent Bookings']);
        const recentBookings = document.getElementById('recent-bookings-list');
        if (recentBookings) {
            const bookingItems = recentBookings.querySelectorAll('li');
            bookingItems.forEach(item => {
                const bookingInfo = item.querySelector('div:nth-child(1)')?.textContent || 'Unknown';
                const bookingDate = item.querySelector('div:nth-child(2)')?.textContent || '';
                csvData.push([bookingInfo.trim(), bookingDate.trim()]);
            });
        }
        csvData.push([]);
        
        // Users This Week
        csvData.push(['Users This Week']);
        const userList = document.getElementById('user-list');
        if (userList) {
            const userItems = userList.querySelectorAll('li');
            userItems.forEach(item => {
                csvData.push([item.textContent.trim()]);
            });
        }
        csvData.push([]);
        
        // Bookings This Week
        csvData.push(['Bookings This Week']);
        const bookingList = document.getElementById('booking-list');
        if (bookingList) {
            const bookingItems = bookingList.querySelectorAll('li');
            bookingItems.forEach(item => {
                csvData.push([item.textContent.trim()]);
            });
        }
        csvData.push([]);
        
        // Top Destinations
        csvData.push(['Top Destinations']);
        const destinationsList = document.getElementById('destinations-list');
        if (destinationsList) {
            const destinationItems = destinationsList.querySelectorAll('li');
            destinationItems.forEach(item => {
                const destination = item.querySelector('.destination-name')?.textContent || 'Unknown';
                const count = item.querySelector('.destination-count')?.textContent || '0';
                csvData.push([destination, count]);
            });
        }
        
        // Convert to CSV string
        let csvContent = csvData.map(row => row.join(',')).join('\n');
        
        // Create a blob and download link
        const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
        const url = URL.createObjectURL(blob);
        const link = document.createElement('a');
        link.setAttribute('href', url);
        link.setAttribute('download', `dashboard_report_${new Date().toISOString().split('T')[0]}.csv`);
        link.style.visibility = 'hidden';
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
        
        showNotification('Dashboard data exported to CSV successfully', 'success');
    } catch (error) {
        console.error('Error exporting to CSV:', error);
        showNotification('Failed to export data to CSV', 'error');
    }
}

// Excel Export Function (using SheetJS)
function exportToExcel() {
    try {
        // Load the SheetJS library if not already loaded
        if (typeof XLSX === 'undefined') {
            const script = document.createElement('script');
            script.src = 'https://cdn.jsdelivr.net/npm/xlsx@0.18.5/dist/xlsx.full.min.js';
            script.onload = performExcelExport;
            document.head.appendChild(script);
        } else {
            performExcelExport();
        }
    } catch (error) {
        console.error('Error exporting to Excel:', error);
        showNotification('Failed to export data to Excel', 'error');
    }
}

function performExcelExport() {
    try {
        // Create workbook and worksheet
        const wb = XLSX.utils.book_new();
        
        // Summary Statistics
        const summaryData = [
            ['A.BEE Travel and Tours - Admin Dashboard Report'],
            ['Generated on:', new Date().toLocaleString()],
            [],
            ['Summary Statistics'],
            ['Total Users', document.getElementById('totalUsers').textContent],
            ['Total Bookings', document.getElementById('totalBookings').textContent],
            ['Total Sales', document.getElementById('totalRevenue').textContent]
        ];
        const summaryWs = XLSX.utils.aoa_to_sheet(summaryData);
        XLSX.utils.book_append_sheet(wb, summaryWs, 'Summary');
        
        // Recent Users
        const recentUsersData = [['Username', 'Registration Date']];
        const recentUsers = document.getElementById('recent-users-list');
        if (recentUsers) {
            const userItems = recentUsers.querySelectorAll('li');
            userItems.forEach(item => {
                const username = item.querySelector('strong')?.textContent || 'Unknown';
                const registrationInfo = item.querySelector('div:nth-child(2)')?.textContent || '';
                recentUsersData.push([username, registrationInfo.trim()]);
            });
        }
        const recentUsersWs = XLSX.utils.aoa_to_sheet(recentUsersData);
        XLSX.utils.book_append_sheet(wb, recentUsersWs, 'Recent Users');
        
        // Recent Bookings
        const recentBookingsData = [['Booking Info', 'Booking Date']];
        const recentBookings = document.getElementById('recent-bookings-list');
        if (recentBookings) {
            const bookingItems = recentBookings.querySelectorAll('li');
            bookingItems.forEach(item => {
                const bookingInfo = item.querySelector('div:nth-child(1)')?.textContent || 'Unknown';
                const bookingDate = item.querySelector('div:nth-child(2)')?.textContent || '';
                recentBookingsData.push([bookingInfo.trim(), bookingDate.trim()]);
            });
        }
        const recentBookingsWs = XLSX.utils.aoa_to_sheet(recentBookingsData);
        XLSX.utils.book_append_sheet(wb, recentBookingsWs, 'Recent Bookings');
        
        // Weekly Data
        const weeklyData = [
            ['Users This Week'],
            []
        ];
        const userList = document.getElementById('user-list');
        if (userList) {
            const userItems = userList.querySelectorAll('li');
            userItems.forEach(item => {
                weeklyData.push([item.textContent.trim()]);
            });
        }
        
        weeklyData.push([]);
        weeklyData.push(['Bookings This Week']);
        weeklyData.push([]);
        
        const bookingList = document.getElementById('booking-list');
        if (bookingList) {
            const bookingItems = bookingList.querySelectorAll('li');
            bookingItems.forEach(item => {
                weeklyData.push([item.textContent.trim()]);
            });
        }
        
        const weeklyWs = XLSX.utils.aoa_to_sheet(weeklyData);
        XLSX.utils.book_append_sheet(wb, weeklyWs, 'Weekly Data');
        
        // Top Destinations
        const destinationsData = [['Destination', 'Booking Count']];
        const destinationsList = document.getElementById('destinations-list');
        if (destinationsList) {
            const destinationItems = destinationsList.querySelectorAll('li');
            destinationItems.forEach(item => {
                const destination = item.querySelector('.destination-name')?.textContent || 'Unknown';
                const count = item.querySelector('.destination-count')?.textContent || '0';
                destinationsData.push([destination, count]);
            });
        }
        const destinationsWs = XLSX.utils.aoa_to_sheet(destinationsData);
        XLSX.utils.book_append_sheet(wb, destinationsWs, 'Top Destinations');
        
        // Generate Excel file and trigger download
        XLSX.writeFile(wb, `dashboard_report_${new Date().toISOString().split('T')[0]}.xlsx`);
        
        showNotification('Dashboard data exported to Excel successfully', 'success');
    } catch (error) {
        console.error('Error in Excel export:', error);
        showNotification('Failed to export data to Excel', 'error');
    }
}

// Print Dashboard Function
function printDashboard() {
    try {
        // Update print date
        document.getElementById('printDate').textContent = new Date().toLocaleString();
        
        // Trigger print dialog
        window.print();
    } catch (error) {
        console.error('Error printing dashboard:', error);
        showNotification('Failed to print dashboard', 'error');
    }
}

// Add event listeners for export and print buttons
document.addEventListener('DOMContentLoaded', function() {
    document.getElementById('exportCSV').addEventListener('click', exportToCSV);
    document.getElementById('exportExcel').addEventListener('click', exportToExcel);
    document.getElementById('printDashboard').addEventListener('click', printDashboard);
});

// Enhanced notification function with success type
function showNotification(message, type) {
    // Remove any existing notifications
    const existingNotifications = document.querySelectorAll('.notification');
    existingNotifications.forEach(notification => {
        notification.remove();
    });
    
    // Create new notification
    const notification = document.createElement('div');
    notification.className = `notification ${type}`;
    notification.textContent = message;
    
    document.body.appendChild(notification);
    
    // Remove notification after 3 seconds
    setTimeout(() => {
        notification.remove();
    }, 3000);
}
// Add this to your existing JavaScript
let timeBasedUsersChart = null;
let timeBasedBookingsChart = null;
let timeBasedRevenueChart = null;
let currentPeriod = 'daily';

document.addEventListener('DOMContentLoaded', function() {
    // Initialize date pickers with default values
    const today = new Date();
    const thirtyDaysAgo = new Date();
    thirtyDaysAgo.setDate(today.getDate() - 30);
    
    document.getElementById('daily-start-date').valueAsDate = thirtyDaysAgo;
    document.getElementById('daily-end-date').valueAsDate = today;
    
    // Populate year dropdown for monthly view
    const yearSelect = document.getElementById('monthly-year');
    const currentYear = today.getFullYear();
    for (let year = currentYear; year >= currentYear - 5; year--) {
        const option = document.createElement('option');
        option.value = year;
        option.textContent = year;
        yearSelect.appendChild(option);
    }
    // Set up tab switching
const chartTabs = document.querySelectorAll('.chart-tabs .chart-tab');
chartTabs.forEach(tab => {
    tab.addEventListener('click', function() {
        // Remove active class from all tabs
        chartTabs.forEach(t => t.classList.remove('active'));
        // Add active class to clicked tab
        this.classList.add('active');
        
        // Hide all tab content
        document.querySelectorAll('.chart-tab-content').forEach(content => {
            content.classList.remove('active');
        });
        
        // Show selected tab content
        const period = this.getAttribute('data-period');
        currentPeriod = period;
        
        if (period === 'daily') {
            document.querySelector('.daily-selector').classList.add('active');
            fetchDailyAnalytics();
        } else if (period === 'monthly') {
            document.querySelector('.monthly-selector').classList.add('active');
            fetchMonthlyAnalytics();
        } else if (period === 'yearly') {
            document.querySelector('.yearly-selector').classList.add('active'); // Add this line
            fetchYearlyAnalytics();
        }
    });
});

    
    // Set up button event listeners
    document.getElementById('daily-apply-range').addEventListener('click', fetchDailyAnalytics);
    document.getElementById('monthly-apply').addEventListener('click', fetchMonthlyAnalytics);
    document.getElementById('yearly-apply').addEventListener('click', fetchYearlyAnalytics);
    
    // Initial data fetch
    fetchDailyAnalytics();
});

async function fetchDailyAnalytics() {
    try {
        const startDate = document.getElementById('daily-start-date').value;
        const endDate = document.getElementById('daily-end-date').value;
        
        const response = await fetch(`/api/analytics/daily?startDate=${startDate}&endDate=${endDate}`, {
            credentials: 'include'
        });
        
        if (!response.ok) {
            throw new Error(`HTTP error! Status: ${response.status}`);
        }
        
        const data = await response.json();
        updateTimeBasedCharts('daily', data);
    } catch (error) {
        console.error('Error fetching daily analytics:', error);
        showNotification('Failed to load daily analytics data', 'error');
    }
}

async function fetchMonthlyAnalytics() {
    try {
        const year = document.getElementById('monthly-year').value;
        
        const response = await fetch(`/api/analytics/monthly?year=${year}`, {
            credentials: 'include'
        });
        
        if (!response.ok) {
            throw new Error(`HTTP error! Status: ${response.status}`);
        }
        
        const data = await response.json();
        updateTimeBasedCharts('monthly', data);
    } catch (error) {
        console.error('Error fetching monthly analytics:', error);
        showNotification('Failed to load monthly analytics data', 'error');
    }
}
async function fetchYearlyAnalytics() {
    try {
        const response = await fetch('/api/analytics/yearly', {
            credentials: 'include'
        });
        
        if (!response.ok) {
            throw new Error(`HTTP error! Status: ${response.status}`);
        }
        
        const data = await response.json();
        
        // Get the number of future years to show from the UI
        const futurePeriod = parseInt(document.getElementById('yearly-future-years').value) || 2;
        
        updateTimeBasedCharts('yearly', data, futurePeriod);
    } catch (error) {
        console.error('Error fetching yearly analytics:', error);
        showNotification('Failed to load yearly analytics data', 'error');
    }
}

function updateTimeBasedCharts(period, data) {
    // Process data based on period
    let labels = [];
    let userData = [];
    let bookingData = [];
    let revenueData = [];
    
    if (period === 'daily') {
        // Create a map of all dates in the range
        const startDate = new Date(document.getElementById('daily-start-date').value);
        const endDate = new Date(document.getElementById('daily-end-date').value);
        const dateMap = new Map();
        
        for (let d = new Date(startDate); d <= endDate; d.setDate(d.getDate() + 1)) {
            const dateStr = d.toISOString().split('T')[0];
            dateMap.set(dateStr, { users: 0, bookings: 0, revenue: 0 });
        }
        
        // Fill in actual data
        data.dailyUsers.forEach(item => {
            dateMap.get(item._id).users = item.count;
        });
        
        data.dailyBookings.forEach(item => {
            dateMap.get(item._id).bookings = item.count;
            dateMap.get(item._id).revenue = item.revenue;
        });
        
        // Convert map to arrays
        dateMap.forEach((value, key) => {
            const date = new Date(key);
            labels.push(date.toLocaleDateString());
            userData.push(value.users);
            bookingData.push(value.bookings);
            revenueData.push(value.revenue);
        });
    } else if (period === 'monthly') {
        const monthNames = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        const year = document.getElementById('monthly-year').value;
        
        // Initialize data for all months
        const monthlyData = Array(12).fill().map(() => ({ users: 0, bookings: 0, revenue: 0 }));
        
        // Fill in actual data
        data.monthlyUsers.forEach(item => {
            if (item._id.year.toString() === year) {
                monthlyData[item._id.month - 1].users = item.count;
            }
        });
        
        data.monthlyBookings.forEach(item => {
            if (item._id.year.toString() === year) {
                monthlyData[item._id.month - 1].bookings = item.count;
                monthlyData[item._id.month - 1].revenue = item.revenue;
            }
        });
        
        // Convert to arrays
        labels = monthNames;
        userData = monthlyData.map(m => m.users);
        bookingData = monthlyData.map(m => m.bookings);
        revenueData = monthlyData.map(m => m.revenue);
    } else  if (period === 'yearly') {
        // Get all unique years from the data
        const years = new Set();
        data.yearlyUsers.forEach(item => years.add(item._id.year));
        data.yearlyBookings.forEach(item => years.add(item._id.year));
        
        // Sort years
        const sortedYears = Array.from(years).sort();
        
        // Get current year
        const currentYear = new Date().getFullYear();
        
        // Add future years
        const futureYears = [];
        for (let year = currentYear; year <= currentYear + futurePeriod; year++) {
            if (!years.has(year)) {
                futureYears.push(year);
            }
        }
        
        // Combine existing and future years
        const allYears = [...sortedYears, ...futureYears].sort();
        
        // Initialize data for all years
        const yearlyData = {};
        allYears.forEach(year => {
            yearlyData[year] = { users: 0, bookings: 0, revenue: 0 };
        });
        
        // Fill in actual data
        data.yearlyUsers.forEach(item => {
            yearlyData[item._id.year].users = item.count;
        });
        
        data.yearlyBookings.forEach(item => {
            yearlyData[item._id.year].bookings = item.count;
            yearlyData[item._id.year].revenue = item.revenue;
        });
        
        // Convert to arrays
        labels = allYears.map(year => year.toString());
        userData = allYears.map(year => yearlyData[year].users);
        bookingData = allYears.map(year => yearlyData[year].bookings);
        revenueData = allYears.map(year => yearlyData[year].revenue);
    }
    // Update charts
    updateUsersChart(labels, userData);
    updateBookingsChart(labels, bookingData);
    updateRevenueChart(labels, revenueData);
}
function updateUsersChart(labels, userData) {
    const ctx = document.getElementById('timeBasedUsersChart').getContext('2d');
    
    if (timeBasedUsersChart) {
        timeBasedUsersChart.destroy();
    }
    
    timeBasedUsersChart = new Chart(ctx, {
        type: 'line',
        data: {
            labels: labels,
            datasets: [{
                label: 'User Registrations',
                data: userData,
                backgroundColor: 'rgba(54, 162, 235, 0.2)',
                borderColor: 'rgba(54, 162, 235, 1)',
                borderWidth: 1,
                fill: true
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            scales: {
                y: {
                    beginAtZero: true,
                    ticks: {
                        precision: 0
                    }
                }
            }
        }
    });
}

function updateBookingsChart(labels, bookingData) {
    const ctx = document.getElementById('timeBasedBookingsChart').getContext('2d');
    
    if (timeBasedBookingsChart) {
        timeBasedBookingsChart.destroy();
    }
    
    timeBasedBookingsChart = new Chart(ctx, {
        type: 'line',
        data: {
            labels: labels,
            datasets: [{
                label: 'Bookings',
                data: bookingData,
                backgroundColor: 'rgba(255, 99, 132, 0.2)',
                borderColor: 'rgba(255, 99, 132, 1)',
                borderWidth: 1,
                fill: true
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            scales: {
                y: {
                    beginAtZero: true,
                    ticks: {
                        precision: 0
                    }
                }
            }
        }
    });
}

function updateRevenueChart(labels, revenueData) {
    const ctx = document.getElementById('timeBasedRevenueChart').getContext('2d');
    
    if (timeBasedRevenueChart) {
        timeBasedRevenueChart.destroy();
    }
    
    timeBasedRevenueChart = new Chart(ctx, {
        type: 'line',
        data: {
            labels: labels,
            datasets: [{
                label: 'Revenue',
                data: revenueData,
                backgroundColor: 'rgba(75, 192, 192, 0.2)',
                borderColor: 'rgba(75, 192, 192, 1)',
                borderWidth: 1,
                fill: true
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            scales: {
                y: {
                    beginAtZero: true,
                    ticks: {
                        callback: function(value) {
                            return '₱' + value.toLocaleString();
                        }
                    }
                }
            },
            plugins: {
                tooltip: {
                    callbacks: {
                        label: function(context) {
                            return '₱' + context.raw.toLocaleString();
                        }
                    }
                }
            }
        }
    });
}
document.addEventListener('DOMContentLoaded', function() {
    const analyticsSelector = document.getElementById('analyticsType');
    const userAnalytics = document.getElementById('userAnalytics');
    const bookingAnalytics = document.getElementById('bookingAnalytics');
    const seasonalAnalytics = document.getElementById('seasonalAnalytics');

    analyticsSelector.addEventListener('change', function() {
        // Hide all analytics sections
        userAnalytics.style.display = 'none';
        bookingAnalytics.style.display = 'none';
        seasonalAnalytics.style.display = 'none';

        // Show selected analytics section
        switch(this.value) {
            case 'user':
                userAnalytics.style.display = 'block';
                break;
            case 'booking':
                bookingAnalytics.style.display = 'block';
                break;
            case 'seasonal':
                seasonalAnalytics.style.display = 'block';
                break;
        }

        // Trigger a resize event to fix any chart rendering issues
        window.dispatchEvent(new Event('resize'));
    });
});
const chartOptions = {
    responsive: true,
    maintainAspectRatio: false,
    scales: {
        y: {
            beginAtZero: true
        }
    }
};

// Add resize event listener
window.addEventListener('resize', function() {
    if (userChart) userChart.resize();
    if (bookingChart) bookingChart.resize();
    if (destinationChart) destinationChart.resize();
    if (revenueChart) revenueChart.resize();
    if (userTrendsChart) userTrendsChart.resize();
    if (seasonalTrendsChart) seasonalTrendsChart.resize();
    if (paymentMethodsChart) paymentMethodsChart.resize();
});

async function fetchDailyAnalytics() {
    try {
        const startDate = document.getElementById('daily-start-date').value;
        const endDate = document.getElementById('daily-end-date').value;
        
        const response = await fetch(`/api/analytics/daily?startDate=${startDate}&endDate=${endDate}`, {
            credentials: 'include'
        });
        
        if (!response.ok) {
            throw new Error(`HTTP error! Status: ${response.status}`);
        }
        
        const data = await response.json();
        updateTimeBasedCharts('daily', data);
    } catch (error) {
        console.error('Error fetching daily analytics:', error);
        showNotification('Failed to load daily analytics data', 'error');
    }
}

async function fetchMonthlyAnalytics() {
    try {
        const year = document.getElementById('monthly-year').value;
        
        const response = await fetch(`/api/analytics/monthly?year=${year}`, {
            credentials: 'include'
        });
        
        if (!response.ok) {
            throw new Error(`HTTP error! Status: ${response.status}`);
        }
        
        const data = await response.json();
        updateTimeBasedCharts('monthly', data);
    } catch (error) {
        console.error('Error fetching monthly analytics:', error);
        showNotification('Failed to load monthly analytics data', 'error');
    }
}

async function fetchYearlyAnalytics() {
    try {
        const response = await fetch('/api/analytics/yearly', {
            credentials: 'include'
        });
        
        if (!response.ok) {
            throw new Error(`HTTP error! Status: ${response.status}`);
        }
        
        const data = await response.json();
        updateTimeBasedCharts('yearly', data);
    } catch (error) {
        console.error('Error fetching yearly analytics:', error);
        showNotification('Failed to load yearly analytics data', 'error');
    }
}
function updateTimeBasedCharts(period, data) {
    // Process data based on period
    let labels = [];
    let userData = [];
    let bookingData = [];
    let revenueData = [];
    
    if (period === 'daily') {
        // Create a map of all dates in the range
        const startDate = new Date(document.getElementById('daily-start-date').value);
        const endDate = new Date(document.getElementById('daily-end-date').value);
        const dateMap = new Map();
        
        for (let d = new Date(startDate); d <= endDate; d.setDate(d.getDate() + 1)) {
            const dateStr = d.toISOString().split('T')[0];
            dateMap.set(dateStr, { users: 0, bookings: 0, revenue: 0 });
        }
        
        // Fill in actual data
        data.dailyUsers.forEach(item => {
            dateMap.get(item._id).users = item.count;
        });
        
        data.dailyBookings.forEach(item => {
            dateMap.get(item._id).bookings = item.count;
            dateMap.get(item._id).revenue = item.revenue;
        });
        
        // Convert map to arrays
        dateMap.forEach((value, key) => {
            const date = new Date(key);
            labels.push(date.toLocaleDateString());
            userData.push(value.users);
            bookingData.push(value.bookings);
            revenueData.push(value.revenue);
        });
    } else if (period === 'monthly') {
        const monthNames = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        const year = document.getElementById('monthly-year').value;
        
        // Initialize data for all months
        const monthlyData = Array(12).fill().map(() => ({ users: 0, bookings: 0, revenue: 0 }));
        
        // Fill in actual data
        data.monthlyUsers.forEach(item => {
            if (item._id.year.toString() === year) {
                monthlyData[item._id.month - 1].users = item.count;
            }
        });
        
        data.monthlyBookings.forEach(item => {
            if (item._id.year.toString() === year) {
                monthlyData[item._id.month - 1].bookings = item.count;
                monthlyData[item._id.month - 1].revenue = item.revenue;
            }
        });
        
        // Convert to arrays
        labels = monthNames;
        userData = monthlyData.map(m => m.users);
        bookingData = monthlyData.map(m => m.bookings);
        revenueData = monthlyData.map(m => m.revenue);
    } else if (period === 'yearly') {
        // Get all unique years from the data
        const years = new Set();
        data.yearlyUsers.forEach(item => years.add(item._id.year));
        data.yearlyBookings.forEach(item => years.add(item._id.year));
        
        // Sort years
        const sortedYears = Array.from(years).sort();
        
        // Get current year
        const currentYear = new Date().getFullYear();
       // Get the number of future years to show from the UI
const futurePeriod = parseInt(document.getElementById('yearly-future-years').value) || 2;

// Add future years
const futureYears = [];
for (let year = currentYear; year <= currentYear + futurePeriod; year++) {
    if (!years.has(year)) {
        futureYears.push(year);
    }
}

        
        // Combine existing and future years
        const allYears = [...sortedYears, ...futureYears].sort();
        
        // Initialize data for all years
        const yearlyData = {};
        allYears.forEach(year => {
            yearlyData[year] = { users: 0, bookings: 0, revenue: 0 };
        });
        
        // Fill in actual data
        data.yearlyUsers.forEach(item => {
            yearlyData[item._id.year].users = item.count;
        });
        
        data.yearlyBookings.forEach(item => {
            yearlyData[item._id.year].bookings = item.count;
            yearlyData[item._id.year].revenue = item.revenue;
        });
        
        // Convert to arrays
        labels = allYears.map(year => year.toString());
        userData = allYears.map(year => yearlyData[year].users);
        bookingData = allYears.map(year => yearlyData[year].bookings);
        revenueData = allYears.map(year => yearlyData[year].revenue);
    }
    
    // Update charts
    updateUsersChart(labels, userData);
    updateBookingsChart(labels, bookingData);
    updateRevenueChart(labels, revenueData);
}


function updateUsersChart(labels, userData) {
    const ctx = document.getElementById('timeBasedUsersChart').getContext('2d');
    
    if (timeBasedUsersChart) {
        timeBasedUsersChart.destroy();
    }
    
    timeBasedUsersChart = new Chart(ctx, {
        type: 'line',
        data: {
            labels: labels,
            datasets: [{
                label: 'User Registrations',
                data: userData,
                backgroundColor: 'rgba(54, 162, 235, 0.2)',
                borderColor: 'rgba(54, 162, 235, 1)',
                borderWidth: 1,
                fill: true
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            scales: {
                y: {
                    beginAtZero: true,
                    ticks: {
                        precision: 0
                    }
                }
            }
        }
    });
}

function updateBookingsChart(labels, bookingData) {
    const ctx = document.getElementById('timeBasedBookingsChart').getContext('2d');
    
    if (timeBasedBookingsChart) {
        timeBasedBookingsChart.destroy();
    }
    
    timeBasedBookingsChart = new Chart(ctx, {
        type: 'line',
        data: {
            labels: labels,
            datasets: [{
                label: 'Bookings',
                data: bookingData,
                backgroundColor: 'rgba(255, 99, 132, 0.2)',
                borderColor: 'rgba(255, 99, 132, 1)',
                borderWidth: 1,
                fill: true
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            scales: {
                y: {
                    beginAtZero: true,
                    ticks: {
                        precision: 0
                    }
                }
            }
        }
    });
}

function updateRevenueChart(labels, revenueData) {
    const ctx = document.getElementById('timeBasedRevenueChart').getContext('2d');
    
    if (timeBasedRevenueChart) {
        timeBasedRevenueChart.destroy();
    }
    
    timeBasedRevenueChart = new Chart(ctx, {
        type: 'line',
        data: {
            labels: labels,
            datasets: [{
                label: 'Sales',
                data: revenueData,
                backgroundColor: 'rgba(75, 192, 192, 0.2)',
                borderColor: 'rgba(75, 192, 192, 1)',
                borderWidth: 1,
                fill: true
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            scales: {
                y: {
                    beginAtZero: true,
                    ticks: {
                        callback: function(value) {
                            return '₱' + value.toLocaleString();
                        }
                    }
                }
            },
            plugins: {
                tooltip: {
                    callbacks: {
                        label: function(context) {
                            return '₱' + context.raw.toLocaleString();
                        }
                    }
                }
            }
        }
    });
}
function calculateMovingAverage(data, windowSize) {
    const movingAverages = [];
    for (let i = 0; i < data.length; i++) {
        const start = Math.max(0, i - windowSize + 1);
        const windowData = data.slice(start, i + 1);
        const sum = windowData.reduce((acc, val) => acc + val, 0);
        movingAverages.push(sum / windowData.length);
    }
    return movingAverages;
}
function updateUsersChart(labels, userData) {
    const ctx = document.getElementById('timeBasedUsersChart').getContext('2d');
    
    if (timeBasedUsersChart) {
        timeBasedUsersChart.destroy();
    }
    
    const movingAverageData = calculateMovingAverage(userData, 7); // 7-day moving average
    
    timeBasedUsersChart = new Chart(ctx, {
        type: 'line',
        data: {
            labels: labels,
            datasets: [{
                label: 'User Registrations',
                data: userData,
                backgroundColor: 'rgba(54, 162, 235, 0.2)',
                borderColor: 'rgba(54, 162, 235, 1)',
                borderWidth: 1,
                fill: true
            }, {
                label: '7-Day Moving Average',
                data: movingAverageData,
                backgroundColor: 'rgba(255, 159, 64, 0.2)',
                borderColor: 'rgba(255, 159, 64, 1)',
                borderWidth: 1,
                fill: true
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            scales: {
                y: {
                    beginAtZero: true,
                    ticks: {
                        precision: 0
                    }
                }
            }
        }
    });
}

function updateBookingsChart(labels, bookingData) {
    const ctx = document.getElementById('timeBasedBookingsChart').getContext('2d');
    
    if (timeBasedBookingsChart) {
        timeBasedBookingsChart.destroy();
    }
    
    const movingAverageData = calculateMovingAverage(bookingData, 7); // 7-day moving average
    
    timeBasedBookingsChart = new Chart(ctx, {
        type: 'line',
        data: {
            labels: labels,
            datasets: [{
                label: 'Bookings',
                data: bookingData,
                backgroundColor: 'rgba(255, 99, 132, 0.2)',
                borderColor: 'rgba(255, 99, 132, 1)',
                borderWidth: 1,
                fill: true
            }, {
                label: '7-Day Moving Average',
                data: movingAverageData,
                backgroundColor: 'rgba(255, 206, 86, 0.2)',
                borderColor: 'rgba(255, 206, 86, 1)',
                borderWidth: 1,
                fill: true
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            scales: {
                y: {
                    beginAtZero: true,
                    ticks: {
                        precision: 0
                    }
                }
            }
        }
    });
}

function updateRevenueChart(labels, revenueData) {
    const ctx = document.getElementById('timeBasedRevenueChart').getContext('2d');
    
    if (timeBasedRevenueChart) {
        timeBasedRevenueChart.destroy();
    }
    
    const movingAverageData = calculateMovingAverage(revenueData, 7); // 7-day moving average
    
    timeBasedRevenueChart = new Chart(ctx, {
        type: 'line',
        data: {
            labels: labels,
            datasets: [{
                label: 'Revenue',
                data: revenueData,
                backgroundColor: 'rgba(75, 192, 192, 0.2)',
                borderColor: 'rgba(75, 192, 192, 1)',
                borderWidth: 1,
                fill: true
            }, {
                label: '7-Day Moving Average',
                data: movingAverageData,
                backgroundColor: 'rgba(153, 102, 255, 0.2)',
                borderColor: 'rgba(153, 102, 255, 1)',
                borderWidth: 1,
                fill: true
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            scales: {
                y: {
                    beginAtZero: true,
                    ticks: {
                        callback: function(value) {
                            return '₱' + value.toLocaleString();
                        }
                    }
                }
            },
            plugins: {
                tooltip: {
                    callbacks: {
                        label: function(context) {
                            return '₱' + context.raw.toLocaleString();
                        }
                    }
                }
            }
        }
    });
}
let seasonalTrendsChart = null;
let predictedDestinationsChart = null;
document.addEventListener('DOMContentLoaded', function() {
    const seasonalYearSelect = document.getElementById('seasonal-year');
    const currentYear = new Date().getFullYear();
    for (let year = currentYear; year >= currentYear - 5; year--) {
        const option = document.createElement('option');
        option.value = year;
        option.textContent = year;
        seasonalYearSelect.appendChild(option);
    }

    document.getElementById('seasonal-apply').addEventListener('click', fetchSeasonalAnalytics);
});

async function fetchSeasonalAnalytics() {
    try {
        const year = document.getElementById('seasonal-year').value;
        const response = await fetch(`/api/analytics/seasonal-trends?year=${year}`, {
            credentials: 'include'
        });

        if (!response.ok) {
            throw new Error(`HTTP error! Status: ${response.status}`);
        }

        const seasonalData = await response.json();
        updateSeasonalTrendsChart(seasonalData.seasonalTrends);
        updatePredictedDestinationsChart(seasonalData.predictedDestinations);

        // Update the title for predicted bookings
        const nextYear = parseInt(year) + 1;
        document.getElementById('predictedBookingsTitle').textContent = `Predicted Bookings for ${nextYear}`;
    } catch (error) {
        console.error('Error fetching seasonal analytics:', error);
        showNotification('Failed to load seasonal analytics data', 'error');
    }
}

function updateSeasonalTrendsChart(seasonalTrends) {
    const ctx = document.getElementById('seasonalTrendsChart').getContext('2d');
    
    // Process data for chart
    const seasonData = {};
    seasonalTrends.forEach(item => {
        const season = item.season;
        const destination = item.destination || 'Unknown';
        
        if (!seasonData[season]) {
            seasonData[season] = {};
        }
        
        if (!seasonData[season][destination]) {
            seasonData[season][destination] = 0;
        }
        
        seasonData[season][destination] += item.count;
    });

    const seasons = ['Winter', 'Spring', 'Summer', 'Fall', 'Wet Season', 'Dry Season'];
    const destinations = [...new Set(seasonalTrends.map(item => item.destination || 'Unknown'))];

    const datasets = destinations.map((destination, index) => {
        const color = `hsl(${index * 360 / destinations.length}, 70%, 60%)`;
        return {
            label: destination,
            data: seasons.map(season => seasonData[season] && seasonData[season][destination] ? seasonData[season][destination] : 0),
            backgroundColor: `hsla(${index * 360 / destinations.length}, 70%, 60%, 0.6)`,
            borderColor: color,
            borderWidth: 1
        };
    });

    if (seasonalTrendsChart) seasonalTrendsChart.destroy();
    
    seasonalTrendsChart = new Chart(ctx, {
        type: 'bar',
        data: {
            labels: seasons,
            datasets: datasets
        },
        options: {
            responsive: true,
            scales: {
                y: {
                    beginAtZero: true,
                    ticks: {
                        precision: 0
                    }
                }
            },
            plugins: {
                title: {
                    display: true,
                    text: 'Seasonal Booking Trends by Destination',
                    font: {
                        size: 16
                    }
                }
            }
        }
    });
}

function updatePredictedDestinationsChart(predictedDestinations) {
    const ctx = document.getElementById('predictedBookingsChart').getContext('2d');

    // Define colors for each season
    const seasonColors = {
        Winter: 'rgba(54, 162, 235, 0.6)', // Blue
        Spring: 'rgba(75, 192, 192, 0.6)', // Green
        Summer: 'rgba(255, 206, 86, 0.6)', // Yellow
        Fall: 'rgba(255, 159, 64, 0.6)', // Orange
        'Wet Season': 'rgba(54, 162, 235, 0.6)', // Blue
        'Dry Season': 'rgba(75, 192, 192, 0.6)', // Green
        Monsoon: 'rgba(255, 206, 86, 0.6)', // Yellow
        'Post-Monsoon': 'rgba(255, 159, 64, 0.6)' // Orange
    };

    // Prepare data for the chart
    const labels = predictedDestinations[0].destinations.map(dest => dest.destination);
    const datasets = predictedDestinations.map(item => {
        return {
            label: item.season,
            data: item.destinations.map(dest => dest.predictedCount),
            backgroundColor: seasonColors[item.season],
            borderColor: seasonColors[item.season].replace('0.6', '1'),
            borderWidth: 1,
            fill: true
        };
    });

    if (predictedDestinationsChart) predictedDestinationsChart.destroy();

    predictedDestinationsChart = new Chart(ctx, {
        type: 'bar',
        data: {
            labels: labels,
            datasets: datasets
        },
        options: { 
            responsive: true,
            scales: {
                y: {
                    beginAtZero: true,
                    ticks: {
                        precision: 0
                    }
                }
            },
            plugins: {
                title: {
                    display: true,
                    text: 'Predicted Popular Destinations for Each Season',
                    font: {
                        size: 16
                    }
                }
            }
        }
    });
}

document.addEventListener('DOMContentLoaded', function() {
    fetchSeasonalAnalytics();
});

    </script>
</body>
</html>
